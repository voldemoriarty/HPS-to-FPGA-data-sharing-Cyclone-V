// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.1 670

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		input  wire [11:0]  hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0]  hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]   hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]   hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]   hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]   hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]   hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]   hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire         hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire         hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0]  hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]   hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire         hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire         hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire         hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0]  hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]   hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire         hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire         hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0]  hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]   hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]   hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]   hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]   hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]   hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]   hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire         hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire         hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0]  hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0]  hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]   hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire         hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire         hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire         hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire         clk_0_clk_clk,                                                       //                                                     clk_0_clk.clk
		input  wire         hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire         streamA_DMA_reset_n_reset_bridge_in_reset_reset,                     //                     streamA_DMA_reset_n_reset_bridge_in_reset.reset
		output wire [17:0]  mm_bridge_0_s0_address,                                              //                                                mm_bridge_0_s0.address
		output wire         mm_bridge_0_s0_write,                                                //                                                              .write
		output wire         mm_bridge_0_s0_read,                                                 //                                                              .read
		input  wire [31:0]  mm_bridge_0_s0_readdata,                                             //                                                              .readdata
		output wire [31:0]  mm_bridge_0_s0_writedata,                                            //                                                              .writedata
		output wire [0:0]   mm_bridge_0_s0_burstcount,                                           //                                                              .burstcount
		output wire [3:0]   mm_bridge_0_s0_byteenable,                                           //                                                              .byteenable
		input  wire         mm_bridge_0_s0_readdatavalid,                                        //                                                              .readdatavalid
		input  wire         mm_bridge_0_s0_waitrequest,                                          //                                                              .waitrequest
		output wire         mm_bridge_0_s0_debugaccess,                                          //                                                              .debugaccess
		output wire [2:0]   streamA_DMA_csr_address,                                             //                                               streamA_DMA_csr.address
		output wire         streamA_DMA_csr_write,                                               //                                                              .write
		output wire         streamA_DMA_csr_read,                                                //                                                              .read
		input  wire [31:0]  streamA_DMA_csr_readdata,                                            //                                                              .readdata
		output wire [31:0]  streamA_DMA_csr_writedata,                                           //                                                              .writedata
		output wire [3:0]   streamA_DMA_csr_byteenable,                                          //                                                              .byteenable
		output wire         streamA_DMA_descriptor_slave_write,                                  //                                  streamA_DMA_descriptor_slave.write
		output wire [127:0] streamA_DMA_descriptor_slave_writedata,                              //                                                              .writedata
		output wire [15:0]  streamA_DMA_descriptor_slave_byteenable,                             //                                                              .byteenable
		input  wire         streamA_DMA_descriptor_slave_waitrequest,                            //                                                              .waitrequest
		output wire [2:0]   streamB_DMA_csr_address,                                             //                                               streamB_DMA_csr.address
		output wire         streamB_DMA_csr_write,                                               //                                                              .write
		output wire         streamB_DMA_csr_read,                                                //                                                              .read
		input  wire [31:0]  streamB_DMA_csr_readdata,                                            //                                                              .readdata
		output wire [31:0]  streamB_DMA_csr_writedata,                                           //                                                              .writedata
		output wire [3:0]   streamB_DMA_csr_byteenable,                                          //                                                              .byteenable
		output wire         streamB_DMA_descriptor_slave_write,                                  //                                  streamB_DMA_descriptor_slave.write
		output wire [127:0] streamB_DMA_descriptor_slave_writedata,                              //                                                              .writedata
		output wire [15:0]  streamB_DMA_descriptor_slave_byteenable,                             //                                                              .byteenable
		input  wire         streamB_DMA_descriptor_slave_waitrequest,                            //                                                              .waitrequest
		output wire [2:0]   streamR_DMA_csr_address,                                             //                                               streamR_DMA_csr.address
		output wire         streamR_DMA_csr_write,                                               //                                                              .write
		output wire         streamR_DMA_csr_read,                                                //                                                              .read
		input  wire [31:0]  streamR_DMA_csr_readdata,                                            //                                                              .readdata
		output wire [31:0]  streamR_DMA_csr_writedata,                                           //                                                              .writedata
		output wire [3:0]   streamR_DMA_csr_byteenable,                                          //                                                              .byteenable
		output wire         streamR_DMA_descriptor_slave_write,                                  //                                  streamR_DMA_descriptor_slave.write
		output wire [127:0] streamR_DMA_descriptor_slave_writedata,                              //                                                              .writedata
		output wire [15:0]  streamR_DMA_descriptor_slave_byteenable,                             //                                                              .byteenable
		input  wire         streamR_DMA_descriptor_slave_waitrequest                             //                                                              .waitrequest
	);

	wire   [31:0] streama_dma_csr_agent_m0_readdata;                                // streamA_DMA_csr_translator:uav_readdata -> streamA_DMA_csr_agent:m0_readdata
	wire          streama_dma_csr_agent_m0_waitrequest;                             // streamA_DMA_csr_translator:uav_waitrequest -> streamA_DMA_csr_agent:m0_waitrequest
	wire          streama_dma_csr_agent_m0_debugaccess;                             // streamA_DMA_csr_agent:m0_debugaccess -> streamA_DMA_csr_translator:uav_debugaccess
	wire   [20:0] streama_dma_csr_agent_m0_address;                                 // streamA_DMA_csr_agent:m0_address -> streamA_DMA_csr_translator:uav_address
	wire    [3:0] streama_dma_csr_agent_m0_byteenable;                              // streamA_DMA_csr_agent:m0_byteenable -> streamA_DMA_csr_translator:uav_byteenable
	wire          streama_dma_csr_agent_m0_read;                                    // streamA_DMA_csr_agent:m0_read -> streamA_DMA_csr_translator:uav_read
	wire          streama_dma_csr_agent_m0_readdatavalid;                           // streamA_DMA_csr_translator:uav_readdatavalid -> streamA_DMA_csr_agent:m0_readdatavalid
	wire          streama_dma_csr_agent_m0_lock;                                    // streamA_DMA_csr_agent:m0_lock -> streamA_DMA_csr_translator:uav_lock
	wire   [31:0] streama_dma_csr_agent_m0_writedata;                               // streamA_DMA_csr_agent:m0_writedata -> streamA_DMA_csr_translator:uav_writedata
	wire          streama_dma_csr_agent_m0_write;                                   // streamA_DMA_csr_agent:m0_write -> streamA_DMA_csr_translator:uav_write
	wire    [2:0] streama_dma_csr_agent_m0_burstcount;                              // streamA_DMA_csr_agent:m0_burstcount -> streamA_DMA_csr_translator:uav_burstcount
	wire          streama_dma_csr_agent_rf_source_valid;                            // streamA_DMA_csr_agent:rf_source_valid -> streamA_DMA_csr_agent_rsp_fifo:in_valid
	wire  [118:0] streama_dma_csr_agent_rf_source_data;                             // streamA_DMA_csr_agent:rf_source_data -> streamA_DMA_csr_agent_rsp_fifo:in_data
	wire          streama_dma_csr_agent_rf_source_ready;                            // streamA_DMA_csr_agent_rsp_fifo:in_ready -> streamA_DMA_csr_agent:rf_source_ready
	wire          streama_dma_csr_agent_rf_source_startofpacket;                    // streamA_DMA_csr_agent:rf_source_startofpacket -> streamA_DMA_csr_agent_rsp_fifo:in_startofpacket
	wire          streama_dma_csr_agent_rf_source_endofpacket;                      // streamA_DMA_csr_agent:rf_source_endofpacket -> streamA_DMA_csr_agent_rsp_fifo:in_endofpacket
	wire          streama_dma_csr_agent_rsp_fifo_out_valid;                         // streamA_DMA_csr_agent_rsp_fifo:out_valid -> streamA_DMA_csr_agent:rf_sink_valid
	wire  [118:0] streama_dma_csr_agent_rsp_fifo_out_data;                          // streamA_DMA_csr_agent_rsp_fifo:out_data -> streamA_DMA_csr_agent:rf_sink_data
	wire          streama_dma_csr_agent_rsp_fifo_out_ready;                         // streamA_DMA_csr_agent:rf_sink_ready -> streamA_DMA_csr_agent_rsp_fifo:out_ready
	wire          streama_dma_csr_agent_rsp_fifo_out_startofpacket;                 // streamA_DMA_csr_agent_rsp_fifo:out_startofpacket -> streamA_DMA_csr_agent:rf_sink_startofpacket
	wire          streama_dma_csr_agent_rsp_fifo_out_endofpacket;                   // streamA_DMA_csr_agent_rsp_fifo:out_endofpacket -> streamA_DMA_csr_agent:rf_sink_endofpacket
	wire          streama_dma_csr_agent_rdata_fifo_src_valid;                       // streamA_DMA_csr_agent:rdata_fifo_src_valid -> streamA_DMA_csr_agent_rdata_fifo:in_valid
	wire   [33:0] streama_dma_csr_agent_rdata_fifo_src_data;                        // streamA_DMA_csr_agent:rdata_fifo_src_data -> streamA_DMA_csr_agent_rdata_fifo:in_data
	wire          streama_dma_csr_agent_rdata_fifo_src_ready;                       // streamA_DMA_csr_agent_rdata_fifo:in_ready -> streamA_DMA_csr_agent:rdata_fifo_src_ready
	wire   [31:0] streamb_dma_csr_agent_m0_readdata;                                // streamB_DMA_csr_translator:uav_readdata -> streamB_DMA_csr_agent:m0_readdata
	wire          streamb_dma_csr_agent_m0_waitrequest;                             // streamB_DMA_csr_translator:uav_waitrequest -> streamB_DMA_csr_agent:m0_waitrequest
	wire          streamb_dma_csr_agent_m0_debugaccess;                             // streamB_DMA_csr_agent:m0_debugaccess -> streamB_DMA_csr_translator:uav_debugaccess
	wire   [20:0] streamb_dma_csr_agent_m0_address;                                 // streamB_DMA_csr_agent:m0_address -> streamB_DMA_csr_translator:uav_address
	wire    [3:0] streamb_dma_csr_agent_m0_byteenable;                              // streamB_DMA_csr_agent:m0_byteenable -> streamB_DMA_csr_translator:uav_byteenable
	wire          streamb_dma_csr_agent_m0_read;                                    // streamB_DMA_csr_agent:m0_read -> streamB_DMA_csr_translator:uav_read
	wire          streamb_dma_csr_agent_m0_readdatavalid;                           // streamB_DMA_csr_translator:uav_readdatavalid -> streamB_DMA_csr_agent:m0_readdatavalid
	wire          streamb_dma_csr_agent_m0_lock;                                    // streamB_DMA_csr_agent:m0_lock -> streamB_DMA_csr_translator:uav_lock
	wire   [31:0] streamb_dma_csr_agent_m0_writedata;                               // streamB_DMA_csr_agent:m0_writedata -> streamB_DMA_csr_translator:uav_writedata
	wire          streamb_dma_csr_agent_m0_write;                                   // streamB_DMA_csr_agent:m0_write -> streamB_DMA_csr_translator:uav_write
	wire    [2:0] streamb_dma_csr_agent_m0_burstcount;                              // streamB_DMA_csr_agent:m0_burstcount -> streamB_DMA_csr_translator:uav_burstcount
	wire          streamb_dma_csr_agent_rf_source_valid;                            // streamB_DMA_csr_agent:rf_source_valid -> streamB_DMA_csr_agent_rsp_fifo:in_valid
	wire  [118:0] streamb_dma_csr_agent_rf_source_data;                             // streamB_DMA_csr_agent:rf_source_data -> streamB_DMA_csr_agent_rsp_fifo:in_data
	wire          streamb_dma_csr_agent_rf_source_ready;                            // streamB_DMA_csr_agent_rsp_fifo:in_ready -> streamB_DMA_csr_agent:rf_source_ready
	wire          streamb_dma_csr_agent_rf_source_startofpacket;                    // streamB_DMA_csr_agent:rf_source_startofpacket -> streamB_DMA_csr_agent_rsp_fifo:in_startofpacket
	wire          streamb_dma_csr_agent_rf_source_endofpacket;                      // streamB_DMA_csr_agent:rf_source_endofpacket -> streamB_DMA_csr_agent_rsp_fifo:in_endofpacket
	wire          streamb_dma_csr_agent_rsp_fifo_out_valid;                         // streamB_DMA_csr_agent_rsp_fifo:out_valid -> streamB_DMA_csr_agent:rf_sink_valid
	wire  [118:0] streamb_dma_csr_agent_rsp_fifo_out_data;                          // streamB_DMA_csr_agent_rsp_fifo:out_data -> streamB_DMA_csr_agent:rf_sink_data
	wire          streamb_dma_csr_agent_rsp_fifo_out_ready;                         // streamB_DMA_csr_agent:rf_sink_ready -> streamB_DMA_csr_agent_rsp_fifo:out_ready
	wire          streamb_dma_csr_agent_rsp_fifo_out_startofpacket;                 // streamB_DMA_csr_agent_rsp_fifo:out_startofpacket -> streamB_DMA_csr_agent:rf_sink_startofpacket
	wire          streamb_dma_csr_agent_rsp_fifo_out_endofpacket;                   // streamB_DMA_csr_agent_rsp_fifo:out_endofpacket -> streamB_DMA_csr_agent:rf_sink_endofpacket
	wire          streamb_dma_csr_agent_rdata_fifo_src_valid;                       // streamB_DMA_csr_agent:rdata_fifo_src_valid -> streamB_DMA_csr_agent_rdata_fifo:in_valid
	wire   [33:0] streamb_dma_csr_agent_rdata_fifo_src_data;                        // streamB_DMA_csr_agent:rdata_fifo_src_data -> streamB_DMA_csr_agent_rdata_fifo:in_data
	wire          streamb_dma_csr_agent_rdata_fifo_src_ready;                       // streamB_DMA_csr_agent_rdata_fifo:in_ready -> streamB_DMA_csr_agent:rdata_fifo_src_ready
	wire   [31:0] streamr_dma_csr_agent_m0_readdata;                                // streamR_DMA_csr_translator:uav_readdata -> streamR_DMA_csr_agent:m0_readdata
	wire          streamr_dma_csr_agent_m0_waitrequest;                             // streamR_DMA_csr_translator:uav_waitrequest -> streamR_DMA_csr_agent:m0_waitrequest
	wire          streamr_dma_csr_agent_m0_debugaccess;                             // streamR_DMA_csr_agent:m0_debugaccess -> streamR_DMA_csr_translator:uav_debugaccess
	wire   [20:0] streamr_dma_csr_agent_m0_address;                                 // streamR_DMA_csr_agent:m0_address -> streamR_DMA_csr_translator:uav_address
	wire    [3:0] streamr_dma_csr_agent_m0_byteenable;                              // streamR_DMA_csr_agent:m0_byteenable -> streamR_DMA_csr_translator:uav_byteenable
	wire          streamr_dma_csr_agent_m0_read;                                    // streamR_DMA_csr_agent:m0_read -> streamR_DMA_csr_translator:uav_read
	wire          streamr_dma_csr_agent_m0_readdatavalid;                           // streamR_DMA_csr_translator:uav_readdatavalid -> streamR_DMA_csr_agent:m0_readdatavalid
	wire          streamr_dma_csr_agent_m0_lock;                                    // streamR_DMA_csr_agent:m0_lock -> streamR_DMA_csr_translator:uav_lock
	wire   [31:0] streamr_dma_csr_agent_m0_writedata;                               // streamR_DMA_csr_agent:m0_writedata -> streamR_DMA_csr_translator:uav_writedata
	wire          streamr_dma_csr_agent_m0_write;                                   // streamR_DMA_csr_agent:m0_write -> streamR_DMA_csr_translator:uav_write
	wire    [2:0] streamr_dma_csr_agent_m0_burstcount;                              // streamR_DMA_csr_agent:m0_burstcount -> streamR_DMA_csr_translator:uav_burstcount
	wire          streamr_dma_csr_agent_rf_source_valid;                            // streamR_DMA_csr_agent:rf_source_valid -> streamR_DMA_csr_agent_rsp_fifo:in_valid
	wire  [118:0] streamr_dma_csr_agent_rf_source_data;                             // streamR_DMA_csr_agent:rf_source_data -> streamR_DMA_csr_agent_rsp_fifo:in_data
	wire          streamr_dma_csr_agent_rf_source_ready;                            // streamR_DMA_csr_agent_rsp_fifo:in_ready -> streamR_DMA_csr_agent:rf_source_ready
	wire          streamr_dma_csr_agent_rf_source_startofpacket;                    // streamR_DMA_csr_agent:rf_source_startofpacket -> streamR_DMA_csr_agent_rsp_fifo:in_startofpacket
	wire          streamr_dma_csr_agent_rf_source_endofpacket;                      // streamR_DMA_csr_agent:rf_source_endofpacket -> streamR_DMA_csr_agent_rsp_fifo:in_endofpacket
	wire          streamr_dma_csr_agent_rsp_fifo_out_valid;                         // streamR_DMA_csr_agent_rsp_fifo:out_valid -> streamR_DMA_csr_agent:rf_sink_valid
	wire  [118:0] streamr_dma_csr_agent_rsp_fifo_out_data;                          // streamR_DMA_csr_agent_rsp_fifo:out_data -> streamR_DMA_csr_agent:rf_sink_data
	wire          streamr_dma_csr_agent_rsp_fifo_out_ready;                         // streamR_DMA_csr_agent:rf_sink_ready -> streamR_DMA_csr_agent_rsp_fifo:out_ready
	wire          streamr_dma_csr_agent_rsp_fifo_out_startofpacket;                 // streamR_DMA_csr_agent_rsp_fifo:out_startofpacket -> streamR_DMA_csr_agent:rf_sink_startofpacket
	wire          streamr_dma_csr_agent_rsp_fifo_out_endofpacket;                   // streamR_DMA_csr_agent_rsp_fifo:out_endofpacket -> streamR_DMA_csr_agent:rf_sink_endofpacket
	wire          streamr_dma_csr_agent_rdata_fifo_src_valid;                       // streamR_DMA_csr_agent:rdata_fifo_src_valid -> streamR_DMA_csr_agent_rdata_fifo:in_valid
	wire   [33:0] streamr_dma_csr_agent_rdata_fifo_src_data;                        // streamR_DMA_csr_agent:rdata_fifo_src_data -> streamR_DMA_csr_agent_rdata_fifo:in_data
	wire          streamr_dma_csr_agent_rdata_fifo_src_ready;                       // streamR_DMA_csr_agent_rdata_fifo:in_ready -> streamR_DMA_csr_agent:rdata_fifo_src_ready
	wire  [127:0] streama_dma_descriptor_slave_agent_m0_readdata;                   // streamA_DMA_descriptor_slave_translator:uav_readdata -> streamA_DMA_descriptor_slave_agent:m0_readdata
	wire          streama_dma_descriptor_slave_agent_m0_waitrequest;                // streamA_DMA_descriptor_slave_translator:uav_waitrequest -> streamA_DMA_descriptor_slave_agent:m0_waitrequest
	wire          streama_dma_descriptor_slave_agent_m0_debugaccess;                // streamA_DMA_descriptor_slave_agent:m0_debugaccess -> streamA_DMA_descriptor_slave_translator:uav_debugaccess
	wire   [20:0] streama_dma_descriptor_slave_agent_m0_address;                    // streamA_DMA_descriptor_slave_agent:m0_address -> streamA_DMA_descriptor_slave_translator:uav_address
	wire   [15:0] streama_dma_descriptor_slave_agent_m0_byteenable;                 // streamA_DMA_descriptor_slave_agent:m0_byteenable -> streamA_DMA_descriptor_slave_translator:uav_byteenable
	wire          streama_dma_descriptor_slave_agent_m0_read;                       // streamA_DMA_descriptor_slave_agent:m0_read -> streamA_DMA_descriptor_slave_translator:uav_read
	wire          streama_dma_descriptor_slave_agent_m0_readdatavalid;              // streamA_DMA_descriptor_slave_translator:uav_readdatavalid -> streamA_DMA_descriptor_slave_agent:m0_readdatavalid
	wire          streama_dma_descriptor_slave_agent_m0_lock;                       // streamA_DMA_descriptor_slave_agent:m0_lock -> streamA_DMA_descriptor_slave_translator:uav_lock
	wire  [127:0] streama_dma_descriptor_slave_agent_m0_writedata;                  // streamA_DMA_descriptor_slave_agent:m0_writedata -> streamA_DMA_descriptor_slave_translator:uav_writedata
	wire          streama_dma_descriptor_slave_agent_m0_write;                      // streamA_DMA_descriptor_slave_agent:m0_write -> streamA_DMA_descriptor_slave_translator:uav_write
	wire    [4:0] streama_dma_descriptor_slave_agent_m0_burstcount;                 // streamA_DMA_descriptor_slave_agent:m0_burstcount -> streamA_DMA_descriptor_slave_translator:uav_burstcount
	wire          streama_dma_descriptor_slave_agent_rf_source_valid;               // streamA_DMA_descriptor_slave_agent:rf_source_valid -> streamA_DMA_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [226:0] streama_dma_descriptor_slave_agent_rf_source_data;                // streamA_DMA_descriptor_slave_agent:rf_source_data -> streamA_DMA_descriptor_slave_agent_rsp_fifo:in_data
	wire          streama_dma_descriptor_slave_agent_rf_source_ready;               // streamA_DMA_descriptor_slave_agent_rsp_fifo:in_ready -> streamA_DMA_descriptor_slave_agent:rf_source_ready
	wire          streama_dma_descriptor_slave_agent_rf_source_startofpacket;       // streamA_DMA_descriptor_slave_agent:rf_source_startofpacket -> streamA_DMA_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          streama_dma_descriptor_slave_agent_rf_source_endofpacket;         // streamA_DMA_descriptor_slave_agent:rf_source_endofpacket -> streamA_DMA_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          streama_dma_descriptor_slave_agent_rsp_fifo_out_valid;            // streamA_DMA_descriptor_slave_agent_rsp_fifo:out_valid -> streamA_DMA_descriptor_slave_agent:rf_sink_valid
	wire  [226:0] streama_dma_descriptor_slave_agent_rsp_fifo_out_data;             // streamA_DMA_descriptor_slave_agent_rsp_fifo:out_data -> streamA_DMA_descriptor_slave_agent:rf_sink_data
	wire          streama_dma_descriptor_slave_agent_rsp_fifo_out_ready;            // streamA_DMA_descriptor_slave_agent:rf_sink_ready -> streamA_DMA_descriptor_slave_agent_rsp_fifo:out_ready
	wire          streama_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;    // streamA_DMA_descriptor_slave_agent_rsp_fifo:out_startofpacket -> streamA_DMA_descriptor_slave_agent:rf_sink_startofpacket
	wire          streama_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;      // streamA_DMA_descriptor_slave_agent_rsp_fifo:out_endofpacket -> streamA_DMA_descriptor_slave_agent:rf_sink_endofpacket
	wire          streama_dma_descriptor_slave_agent_rdata_fifo_src_valid;          // streamA_DMA_descriptor_slave_agent:rdata_fifo_src_valid -> streamA_DMA_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] streama_dma_descriptor_slave_agent_rdata_fifo_src_data;           // streamA_DMA_descriptor_slave_agent:rdata_fifo_src_data -> streamA_DMA_descriptor_slave_agent_rdata_fifo:in_data
	wire          streama_dma_descriptor_slave_agent_rdata_fifo_src_ready;          // streamA_DMA_descriptor_slave_agent_rdata_fifo:in_ready -> streamA_DMA_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [127:0] streamb_dma_descriptor_slave_agent_m0_readdata;                   // streamB_DMA_descriptor_slave_translator:uav_readdata -> streamB_DMA_descriptor_slave_agent:m0_readdata
	wire          streamb_dma_descriptor_slave_agent_m0_waitrequest;                // streamB_DMA_descriptor_slave_translator:uav_waitrequest -> streamB_DMA_descriptor_slave_agent:m0_waitrequest
	wire          streamb_dma_descriptor_slave_agent_m0_debugaccess;                // streamB_DMA_descriptor_slave_agent:m0_debugaccess -> streamB_DMA_descriptor_slave_translator:uav_debugaccess
	wire   [20:0] streamb_dma_descriptor_slave_agent_m0_address;                    // streamB_DMA_descriptor_slave_agent:m0_address -> streamB_DMA_descriptor_slave_translator:uav_address
	wire   [15:0] streamb_dma_descriptor_slave_agent_m0_byteenable;                 // streamB_DMA_descriptor_slave_agent:m0_byteenable -> streamB_DMA_descriptor_slave_translator:uav_byteenable
	wire          streamb_dma_descriptor_slave_agent_m0_read;                       // streamB_DMA_descriptor_slave_agent:m0_read -> streamB_DMA_descriptor_slave_translator:uav_read
	wire          streamb_dma_descriptor_slave_agent_m0_readdatavalid;              // streamB_DMA_descriptor_slave_translator:uav_readdatavalid -> streamB_DMA_descriptor_slave_agent:m0_readdatavalid
	wire          streamb_dma_descriptor_slave_agent_m0_lock;                       // streamB_DMA_descriptor_slave_agent:m0_lock -> streamB_DMA_descriptor_slave_translator:uav_lock
	wire  [127:0] streamb_dma_descriptor_slave_agent_m0_writedata;                  // streamB_DMA_descriptor_slave_agent:m0_writedata -> streamB_DMA_descriptor_slave_translator:uav_writedata
	wire          streamb_dma_descriptor_slave_agent_m0_write;                      // streamB_DMA_descriptor_slave_agent:m0_write -> streamB_DMA_descriptor_slave_translator:uav_write
	wire    [4:0] streamb_dma_descriptor_slave_agent_m0_burstcount;                 // streamB_DMA_descriptor_slave_agent:m0_burstcount -> streamB_DMA_descriptor_slave_translator:uav_burstcount
	wire          streamb_dma_descriptor_slave_agent_rf_source_valid;               // streamB_DMA_descriptor_slave_agent:rf_source_valid -> streamB_DMA_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [226:0] streamb_dma_descriptor_slave_agent_rf_source_data;                // streamB_DMA_descriptor_slave_agent:rf_source_data -> streamB_DMA_descriptor_slave_agent_rsp_fifo:in_data
	wire          streamb_dma_descriptor_slave_agent_rf_source_ready;               // streamB_DMA_descriptor_slave_agent_rsp_fifo:in_ready -> streamB_DMA_descriptor_slave_agent:rf_source_ready
	wire          streamb_dma_descriptor_slave_agent_rf_source_startofpacket;       // streamB_DMA_descriptor_slave_agent:rf_source_startofpacket -> streamB_DMA_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          streamb_dma_descriptor_slave_agent_rf_source_endofpacket;         // streamB_DMA_descriptor_slave_agent:rf_source_endofpacket -> streamB_DMA_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          streamb_dma_descriptor_slave_agent_rsp_fifo_out_valid;            // streamB_DMA_descriptor_slave_agent_rsp_fifo:out_valid -> streamB_DMA_descriptor_slave_agent:rf_sink_valid
	wire  [226:0] streamb_dma_descriptor_slave_agent_rsp_fifo_out_data;             // streamB_DMA_descriptor_slave_agent_rsp_fifo:out_data -> streamB_DMA_descriptor_slave_agent:rf_sink_data
	wire          streamb_dma_descriptor_slave_agent_rsp_fifo_out_ready;            // streamB_DMA_descriptor_slave_agent:rf_sink_ready -> streamB_DMA_descriptor_slave_agent_rsp_fifo:out_ready
	wire          streamb_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;    // streamB_DMA_descriptor_slave_agent_rsp_fifo:out_startofpacket -> streamB_DMA_descriptor_slave_agent:rf_sink_startofpacket
	wire          streamb_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;      // streamB_DMA_descriptor_slave_agent_rsp_fifo:out_endofpacket -> streamB_DMA_descriptor_slave_agent:rf_sink_endofpacket
	wire          streamb_dma_descriptor_slave_agent_rdata_fifo_src_valid;          // streamB_DMA_descriptor_slave_agent:rdata_fifo_src_valid -> streamB_DMA_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] streamb_dma_descriptor_slave_agent_rdata_fifo_src_data;           // streamB_DMA_descriptor_slave_agent:rdata_fifo_src_data -> streamB_DMA_descriptor_slave_agent_rdata_fifo:in_data
	wire          streamb_dma_descriptor_slave_agent_rdata_fifo_src_ready;          // streamB_DMA_descriptor_slave_agent_rdata_fifo:in_ready -> streamB_DMA_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [127:0] streamr_dma_descriptor_slave_agent_m0_readdata;                   // streamR_DMA_descriptor_slave_translator:uav_readdata -> streamR_DMA_descriptor_slave_agent:m0_readdata
	wire          streamr_dma_descriptor_slave_agent_m0_waitrequest;                // streamR_DMA_descriptor_slave_translator:uav_waitrequest -> streamR_DMA_descriptor_slave_agent:m0_waitrequest
	wire          streamr_dma_descriptor_slave_agent_m0_debugaccess;                // streamR_DMA_descriptor_slave_agent:m0_debugaccess -> streamR_DMA_descriptor_slave_translator:uav_debugaccess
	wire   [20:0] streamr_dma_descriptor_slave_agent_m0_address;                    // streamR_DMA_descriptor_slave_agent:m0_address -> streamR_DMA_descriptor_slave_translator:uav_address
	wire   [15:0] streamr_dma_descriptor_slave_agent_m0_byteenable;                 // streamR_DMA_descriptor_slave_agent:m0_byteenable -> streamR_DMA_descriptor_slave_translator:uav_byteenable
	wire          streamr_dma_descriptor_slave_agent_m0_read;                       // streamR_DMA_descriptor_slave_agent:m0_read -> streamR_DMA_descriptor_slave_translator:uav_read
	wire          streamr_dma_descriptor_slave_agent_m0_readdatavalid;              // streamR_DMA_descriptor_slave_translator:uav_readdatavalid -> streamR_DMA_descriptor_slave_agent:m0_readdatavalid
	wire          streamr_dma_descriptor_slave_agent_m0_lock;                       // streamR_DMA_descriptor_slave_agent:m0_lock -> streamR_DMA_descriptor_slave_translator:uav_lock
	wire  [127:0] streamr_dma_descriptor_slave_agent_m0_writedata;                  // streamR_DMA_descriptor_slave_agent:m0_writedata -> streamR_DMA_descriptor_slave_translator:uav_writedata
	wire          streamr_dma_descriptor_slave_agent_m0_write;                      // streamR_DMA_descriptor_slave_agent:m0_write -> streamR_DMA_descriptor_slave_translator:uav_write
	wire    [4:0] streamr_dma_descriptor_slave_agent_m0_burstcount;                 // streamR_DMA_descriptor_slave_agent:m0_burstcount -> streamR_DMA_descriptor_slave_translator:uav_burstcount
	wire          streamr_dma_descriptor_slave_agent_rf_source_valid;               // streamR_DMA_descriptor_slave_agent:rf_source_valid -> streamR_DMA_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [226:0] streamr_dma_descriptor_slave_agent_rf_source_data;                // streamR_DMA_descriptor_slave_agent:rf_source_data -> streamR_DMA_descriptor_slave_agent_rsp_fifo:in_data
	wire          streamr_dma_descriptor_slave_agent_rf_source_ready;               // streamR_DMA_descriptor_slave_agent_rsp_fifo:in_ready -> streamR_DMA_descriptor_slave_agent:rf_source_ready
	wire          streamr_dma_descriptor_slave_agent_rf_source_startofpacket;       // streamR_DMA_descriptor_slave_agent:rf_source_startofpacket -> streamR_DMA_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          streamr_dma_descriptor_slave_agent_rf_source_endofpacket;         // streamR_DMA_descriptor_slave_agent:rf_source_endofpacket -> streamR_DMA_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          streamr_dma_descriptor_slave_agent_rsp_fifo_out_valid;            // streamR_DMA_descriptor_slave_agent_rsp_fifo:out_valid -> streamR_DMA_descriptor_slave_agent:rf_sink_valid
	wire  [226:0] streamr_dma_descriptor_slave_agent_rsp_fifo_out_data;             // streamR_DMA_descriptor_slave_agent_rsp_fifo:out_data -> streamR_DMA_descriptor_slave_agent:rf_sink_data
	wire          streamr_dma_descriptor_slave_agent_rsp_fifo_out_ready;            // streamR_DMA_descriptor_slave_agent:rf_sink_ready -> streamR_DMA_descriptor_slave_agent_rsp_fifo:out_ready
	wire          streamr_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;    // streamR_DMA_descriptor_slave_agent_rsp_fifo:out_startofpacket -> streamR_DMA_descriptor_slave_agent:rf_sink_startofpacket
	wire          streamr_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;      // streamR_DMA_descriptor_slave_agent_rsp_fifo:out_endofpacket -> streamR_DMA_descriptor_slave_agent:rf_sink_endofpacket
	wire          streamr_dma_descriptor_slave_agent_rdata_fifo_src_valid;          // streamR_DMA_descriptor_slave_agent:rdata_fifo_src_valid -> streamR_DMA_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] streamr_dma_descriptor_slave_agent_rdata_fifo_src_data;           // streamR_DMA_descriptor_slave_agent:rdata_fifo_src_data -> streamR_DMA_descriptor_slave_agent_rdata_fifo:in_data
	wire          streamr_dma_descriptor_slave_agent_rdata_fifo_src_ready;          // streamR_DMA_descriptor_slave_agent_rdata_fifo:in_ready -> streamR_DMA_descriptor_slave_agent:rdata_fifo_src_ready
	wire   [31:0] mm_bridge_0_s0_agent_m0_readdata;                                 // mm_bridge_0_s0_translator:uav_readdata -> mm_bridge_0_s0_agent:m0_readdata
	wire          mm_bridge_0_s0_agent_m0_waitrequest;                              // mm_bridge_0_s0_translator:uav_waitrequest -> mm_bridge_0_s0_agent:m0_waitrequest
	wire          mm_bridge_0_s0_agent_m0_debugaccess;                              // mm_bridge_0_s0_agent:m0_debugaccess -> mm_bridge_0_s0_translator:uav_debugaccess
	wire   [20:0] mm_bridge_0_s0_agent_m0_address;                                  // mm_bridge_0_s0_agent:m0_address -> mm_bridge_0_s0_translator:uav_address
	wire    [3:0] mm_bridge_0_s0_agent_m0_byteenable;                               // mm_bridge_0_s0_agent:m0_byteenable -> mm_bridge_0_s0_translator:uav_byteenable
	wire          mm_bridge_0_s0_agent_m0_read;                                     // mm_bridge_0_s0_agent:m0_read -> mm_bridge_0_s0_translator:uav_read
	wire          mm_bridge_0_s0_agent_m0_readdatavalid;                            // mm_bridge_0_s0_translator:uav_readdatavalid -> mm_bridge_0_s0_agent:m0_readdatavalid
	wire          mm_bridge_0_s0_agent_m0_lock;                                     // mm_bridge_0_s0_agent:m0_lock -> mm_bridge_0_s0_translator:uav_lock
	wire   [31:0] mm_bridge_0_s0_agent_m0_writedata;                                // mm_bridge_0_s0_agent:m0_writedata -> mm_bridge_0_s0_translator:uav_writedata
	wire          mm_bridge_0_s0_agent_m0_write;                                    // mm_bridge_0_s0_agent:m0_write -> mm_bridge_0_s0_translator:uav_write
	wire    [2:0] mm_bridge_0_s0_agent_m0_burstcount;                               // mm_bridge_0_s0_agent:m0_burstcount -> mm_bridge_0_s0_translator:uav_burstcount
	wire          mm_bridge_0_s0_agent_rf_source_valid;                             // mm_bridge_0_s0_agent:rf_source_valid -> mm_bridge_0_s0_agent_rsp_fifo:in_valid
	wire  [118:0] mm_bridge_0_s0_agent_rf_source_data;                              // mm_bridge_0_s0_agent:rf_source_data -> mm_bridge_0_s0_agent_rsp_fifo:in_data
	wire          mm_bridge_0_s0_agent_rf_source_ready;                             // mm_bridge_0_s0_agent_rsp_fifo:in_ready -> mm_bridge_0_s0_agent:rf_source_ready
	wire          mm_bridge_0_s0_agent_rf_source_startofpacket;                     // mm_bridge_0_s0_agent:rf_source_startofpacket -> mm_bridge_0_s0_agent_rsp_fifo:in_startofpacket
	wire          mm_bridge_0_s0_agent_rf_source_endofpacket;                       // mm_bridge_0_s0_agent:rf_source_endofpacket -> mm_bridge_0_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_bridge_0_s0_agent_rsp_fifo_out_valid;                          // mm_bridge_0_s0_agent_rsp_fifo:out_valid -> mm_bridge_0_s0_agent:rf_sink_valid
	wire  [118:0] mm_bridge_0_s0_agent_rsp_fifo_out_data;                           // mm_bridge_0_s0_agent_rsp_fifo:out_data -> mm_bridge_0_s0_agent:rf_sink_data
	wire          mm_bridge_0_s0_agent_rsp_fifo_out_ready;                          // mm_bridge_0_s0_agent:rf_sink_ready -> mm_bridge_0_s0_agent_rsp_fifo:out_ready
	wire          mm_bridge_0_s0_agent_rsp_fifo_out_startofpacket;                  // mm_bridge_0_s0_agent_rsp_fifo:out_startofpacket -> mm_bridge_0_s0_agent:rf_sink_startofpacket
	wire          mm_bridge_0_s0_agent_rsp_fifo_out_endofpacket;                    // mm_bridge_0_s0_agent_rsp_fifo:out_endofpacket -> mm_bridge_0_s0_agent:rf_sink_endofpacket
	wire          mm_bridge_0_s0_agent_rdata_fifo_src_valid;                        // mm_bridge_0_s0_agent:rdata_fifo_src_valid -> mm_bridge_0_s0_agent_rdata_fifo:in_valid
	wire   [33:0] mm_bridge_0_s0_agent_rdata_fifo_src_data;                         // mm_bridge_0_s0_agent:rdata_fifo_src_data -> mm_bridge_0_s0_agent_rdata_fifo:in_data
	wire          mm_bridge_0_s0_agent_rdata_fifo_src_ready;                        // mm_bridge_0_s0_agent_rdata_fifo:in_ready -> mm_bridge_0_s0_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                     // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                      // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                     // router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;             // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;               // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                      // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                       // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                      // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;              // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          streama_dma_csr_agent_rp_valid;                                   // streamA_DMA_csr_agent:rp_valid -> router_002:sink_valid
	wire  [117:0] streama_dma_csr_agent_rp_data;                                    // streamA_DMA_csr_agent:rp_data -> router_002:sink_data
	wire          streama_dma_csr_agent_rp_ready;                                   // router_002:sink_ready -> streamA_DMA_csr_agent:rp_ready
	wire          streama_dma_csr_agent_rp_startofpacket;                           // streamA_DMA_csr_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          streama_dma_csr_agent_rp_endofpacket;                             // streamA_DMA_csr_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                             // router_002:src_valid -> rsp_demux:sink_valid
	wire  [117:0] router_002_src_data;                                              // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                             // rsp_demux:sink_ready -> router_002:src_ready
	wire    [6:0] router_002_src_channel;                                           // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                     // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                       // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          streamb_dma_csr_agent_rp_valid;                                   // streamB_DMA_csr_agent:rp_valid -> router_003:sink_valid
	wire  [117:0] streamb_dma_csr_agent_rp_data;                                    // streamB_DMA_csr_agent:rp_data -> router_003:sink_data
	wire          streamb_dma_csr_agent_rp_ready;                                   // router_003:sink_ready -> streamB_DMA_csr_agent:rp_ready
	wire          streamb_dma_csr_agent_rp_startofpacket;                           // streamB_DMA_csr_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          streamb_dma_csr_agent_rp_endofpacket;                             // streamB_DMA_csr_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                             // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [117:0] router_003_src_data;                                              // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                             // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [6:0] router_003_src_channel;                                           // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                     // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                       // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          streamr_dma_csr_agent_rp_valid;                                   // streamR_DMA_csr_agent:rp_valid -> router_004:sink_valid
	wire  [117:0] streamr_dma_csr_agent_rp_data;                                    // streamR_DMA_csr_agent:rp_data -> router_004:sink_data
	wire          streamr_dma_csr_agent_rp_ready;                                   // router_004:sink_ready -> streamR_DMA_csr_agent:rp_ready
	wire          streamr_dma_csr_agent_rp_startofpacket;                           // streamR_DMA_csr_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          streamr_dma_csr_agent_rp_endofpacket;                             // streamR_DMA_csr_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                             // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [117:0] router_004_src_data;                                              // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                             // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [6:0] router_004_src_channel;                                           // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                     // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                       // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          streama_dma_descriptor_slave_agent_rp_valid;                      // streamA_DMA_descriptor_slave_agent:rp_valid -> router_005:sink_valid
	wire  [225:0] streama_dma_descriptor_slave_agent_rp_data;                       // streamA_DMA_descriptor_slave_agent:rp_data -> router_005:sink_data
	wire          streama_dma_descriptor_slave_agent_rp_ready;                      // router_005:sink_ready -> streamA_DMA_descriptor_slave_agent:rp_ready
	wire          streama_dma_descriptor_slave_agent_rp_startofpacket;              // streamA_DMA_descriptor_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          streama_dma_descriptor_slave_agent_rp_endofpacket;                // streamA_DMA_descriptor_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          streamb_dma_descriptor_slave_agent_rp_valid;                      // streamB_DMA_descriptor_slave_agent:rp_valid -> router_006:sink_valid
	wire  [225:0] streamb_dma_descriptor_slave_agent_rp_data;                       // streamB_DMA_descriptor_slave_agent:rp_data -> router_006:sink_data
	wire          streamb_dma_descriptor_slave_agent_rp_ready;                      // router_006:sink_ready -> streamB_DMA_descriptor_slave_agent:rp_ready
	wire          streamb_dma_descriptor_slave_agent_rp_startofpacket;              // streamB_DMA_descriptor_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          streamb_dma_descriptor_slave_agent_rp_endofpacket;                // streamB_DMA_descriptor_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          streamr_dma_descriptor_slave_agent_rp_valid;                      // streamR_DMA_descriptor_slave_agent:rp_valid -> router_007:sink_valid
	wire  [225:0] streamr_dma_descriptor_slave_agent_rp_data;                       // streamR_DMA_descriptor_slave_agent:rp_data -> router_007:sink_data
	wire          streamr_dma_descriptor_slave_agent_rp_ready;                      // router_007:sink_ready -> streamR_DMA_descriptor_slave_agent:rp_ready
	wire          streamr_dma_descriptor_slave_agent_rp_startofpacket;              // streamR_DMA_descriptor_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          streamr_dma_descriptor_slave_agent_rp_endofpacket;                // streamR_DMA_descriptor_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          mm_bridge_0_s0_agent_rp_valid;                                    // mm_bridge_0_s0_agent:rp_valid -> router_008:sink_valid
	wire  [117:0] mm_bridge_0_s0_agent_rp_data;                                     // mm_bridge_0_s0_agent:rp_data -> router_008:sink_data
	wire          mm_bridge_0_s0_agent_rp_ready;                                    // router_008:sink_ready -> mm_bridge_0_s0_agent:rp_ready
	wire          mm_bridge_0_s0_agent_rp_startofpacket;                            // mm_bridge_0_s0_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          mm_bridge_0_s0_agent_rp_endofpacket;                              // mm_bridge_0_s0_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                             // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [117:0] router_008_src_data;                                              // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                             // rsp_demux_006:sink_ready -> router_008:src_ready
	wire    [6:0] router_008_src_channel;                                           // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                     // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                       // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_src_valid;                                                 // router:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [117:0] router_src_data;                                                  // router:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                 // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [6:0] router_src_channel;                                               // router:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                         // router:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                           // router:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [117:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                  // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                 // cmd_demux:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire    [6:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;               // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;         // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;           // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                // rsp_mux:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_src_data;                                                 // rsp_mux:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [6:0] rsp_mux_src_channel;                                              // rsp_mux:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                        // rsp_mux:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                          // rsp_mux:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                 // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                  // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                 // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire    [6:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;               // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;         // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;           // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                             // router_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [117:0] router_001_src_data;                                              // router_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                             // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [6:0] router_001_src_channel;                                           // router_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                     // router_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                       // router_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [117:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                  // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                 // cmd_demux_001:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire    [6:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;               // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;         // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;           // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                            // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_001_src_data;                                             // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                            // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [6:0] rsp_mux_001_src_channel;                                          // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                    // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                      // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                 // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [117:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                  // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                 // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire    [6:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;               // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;         // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;           // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                // cmd_mux:src_valid -> streamA_DMA_csr_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_src_data;                                                 // cmd_mux:src_data -> streamA_DMA_csr_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                // streamA_DMA_csr_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [6:0] cmd_mux_src_channel;                                              // cmd_mux:src_channel -> streamA_DMA_csr_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                        // cmd_mux:src_startofpacket -> streamA_DMA_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                          // cmd_mux:src_endofpacket -> streamA_DMA_csr_burst_adapter:sink0_endofpacket
	wire          streama_dma_csr_burst_adapter_source0_valid;                      // streamA_DMA_csr_burst_adapter:source0_valid -> streamA_DMA_csr_agent:cp_valid
	wire  [117:0] streama_dma_csr_burst_adapter_source0_data;                       // streamA_DMA_csr_burst_adapter:source0_data -> streamA_DMA_csr_agent:cp_data
	wire          streama_dma_csr_burst_adapter_source0_ready;                      // streamA_DMA_csr_agent:cp_ready -> streamA_DMA_csr_burst_adapter:source0_ready
	wire    [6:0] streama_dma_csr_burst_adapter_source0_channel;                    // streamA_DMA_csr_burst_adapter:source0_channel -> streamA_DMA_csr_agent:cp_channel
	wire          streama_dma_csr_burst_adapter_source0_startofpacket;              // streamA_DMA_csr_burst_adapter:source0_startofpacket -> streamA_DMA_csr_agent:cp_startofpacket
	wire          streama_dma_csr_burst_adapter_source0_endofpacket;                // streamA_DMA_csr_burst_adapter:source0_endofpacket -> streamA_DMA_csr_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                            // cmd_mux_001:src_valid -> streamB_DMA_csr_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_001_src_data;                                             // cmd_mux_001:src_data -> streamB_DMA_csr_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                            // streamB_DMA_csr_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [6:0] cmd_mux_001_src_channel;                                          // cmd_mux_001:src_channel -> streamB_DMA_csr_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                    // cmd_mux_001:src_startofpacket -> streamB_DMA_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                      // cmd_mux_001:src_endofpacket -> streamB_DMA_csr_burst_adapter:sink0_endofpacket
	wire          streamb_dma_csr_burst_adapter_source0_valid;                      // streamB_DMA_csr_burst_adapter:source0_valid -> streamB_DMA_csr_agent:cp_valid
	wire  [117:0] streamb_dma_csr_burst_adapter_source0_data;                       // streamB_DMA_csr_burst_adapter:source0_data -> streamB_DMA_csr_agent:cp_data
	wire          streamb_dma_csr_burst_adapter_source0_ready;                      // streamB_DMA_csr_agent:cp_ready -> streamB_DMA_csr_burst_adapter:source0_ready
	wire    [6:0] streamb_dma_csr_burst_adapter_source0_channel;                    // streamB_DMA_csr_burst_adapter:source0_channel -> streamB_DMA_csr_agent:cp_channel
	wire          streamb_dma_csr_burst_adapter_source0_startofpacket;              // streamB_DMA_csr_burst_adapter:source0_startofpacket -> streamB_DMA_csr_agent:cp_startofpacket
	wire          streamb_dma_csr_burst_adapter_source0_endofpacket;                // streamB_DMA_csr_burst_adapter:source0_endofpacket -> streamB_DMA_csr_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                            // cmd_mux_002:src_valid -> streamR_DMA_csr_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_002_src_data;                                             // cmd_mux_002:src_data -> streamR_DMA_csr_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                            // streamR_DMA_csr_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [6:0] cmd_mux_002_src_channel;                                          // cmd_mux_002:src_channel -> streamR_DMA_csr_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                    // cmd_mux_002:src_startofpacket -> streamR_DMA_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                      // cmd_mux_002:src_endofpacket -> streamR_DMA_csr_burst_adapter:sink0_endofpacket
	wire          streamr_dma_csr_burst_adapter_source0_valid;                      // streamR_DMA_csr_burst_adapter:source0_valid -> streamR_DMA_csr_agent:cp_valid
	wire  [117:0] streamr_dma_csr_burst_adapter_source0_data;                       // streamR_DMA_csr_burst_adapter:source0_data -> streamR_DMA_csr_agent:cp_data
	wire          streamr_dma_csr_burst_adapter_source0_ready;                      // streamR_DMA_csr_agent:cp_ready -> streamR_DMA_csr_burst_adapter:source0_ready
	wire    [6:0] streamr_dma_csr_burst_adapter_source0_channel;                    // streamR_DMA_csr_burst_adapter:source0_channel -> streamR_DMA_csr_agent:cp_channel
	wire          streamr_dma_csr_burst_adapter_source0_startofpacket;              // streamR_DMA_csr_burst_adapter:source0_startofpacket -> streamR_DMA_csr_agent:cp_startofpacket
	wire          streamr_dma_csr_burst_adapter_source0_endofpacket;                // streamR_DMA_csr_burst_adapter:source0_endofpacket -> streamR_DMA_csr_agent:cp_endofpacket
	wire          streama_dma_descriptor_slave_burst_adapter_source0_valid;         // streamA_DMA_descriptor_slave_burst_adapter:source0_valid -> streamA_DMA_descriptor_slave_agent:cp_valid
	wire  [225:0] streama_dma_descriptor_slave_burst_adapter_source0_data;          // streamA_DMA_descriptor_slave_burst_adapter:source0_data -> streamA_DMA_descriptor_slave_agent:cp_data
	wire          streama_dma_descriptor_slave_burst_adapter_source0_ready;         // streamA_DMA_descriptor_slave_agent:cp_ready -> streamA_DMA_descriptor_slave_burst_adapter:source0_ready
	wire    [6:0] streama_dma_descriptor_slave_burst_adapter_source0_channel;       // streamA_DMA_descriptor_slave_burst_adapter:source0_channel -> streamA_DMA_descriptor_slave_agent:cp_channel
	wire          streama_dma_descriptor_slave_burst_adapter_source0_startofpacket; // streamA_DMA_descriptor_slave_burst_adapter:source0_startofpacket -> streamA_DMA_descriptor_slave_agent:cp_startofpacket
	wire          streama_dma_descriptor_slave_burst_adapter_source0_endofpacket;   // streamA_DMA_descriptor_slave_burst_adapter:source0_endofpacket -> streamA_DMA_descriptor_slave_agent:cp_endofpacket
	wire          streamb_dma_descriptor_slave_burst_adapter_source0_valid;         // streamB_DMA_descriptor_slave_burst_adapter:source0_valid -> streamB_DMA_descriptor_slave_agent:cp_valid
	wire  [225:0] streamb_dma_descriptor_slave_burst_adapter_source0_data;          // streamB_DMA_descriptor_slave_burst_adapter:source0_data -> streamB_DMA_descriptor_slave_agent:cp_data
	wire          streamb_dma_descriptor_slave_burst_adapter_source0_ready;         // streamB_DMA_descriptor_slave_agent:cp_ready -> streamB_DMA_descriptor_slave_burst_adapter:source0_ready
	wire    [6:0] streamb_dma_descriptor_slave_burst_adapter_source0_channel;       // streamB_DMA_descriptor_slave_burst_adapter:source0_channel -> streamB_DMA_descriptor_slave_agent:cp_channel
	wire          streamb_dma_descriptor_slave_burst_adapter_source0_startofpacket; // streamB_DMA_descriptor_slave_burst_adapter:source0_startofpacket -> streamB_DMA_descriptor_slave_agent:cp_startofpacket
	wire          streamb_dma_descriptor_slave_burst_adapter_source0_endofpacket;   // streamB_DMA_descriptor_slave_burst_adapter:source0_endofpacket -> streamB_DMA_descriptor_slave_agent:cp_endofpacket
	wire          streamr_dma_descriptor_slave_burst_adapter_source0_valid;         // streamR_DMA_descriptor_slave_burst_adapter:source0_valid -> streamR_DMA_descriptor_slave_agent:cp_valid
	wire  [225:0] streamr_dma_descriptor_slave_burst_adapter_source0_data;          // streamR_DMA_descriptor_slave_burst_adapter:source0_data -> streamR_DMA_descriptor_slave_agent:cp_data
	wire          streamr_dma_descriptor_slave_burst_adapter_source0_ready;         // streamR_DMA_descriptor_slave_agent:cp_ready -> streamR_DMA_descriptor_slave_burst_adapter:source0_ready
	wire    [6:0] streamr_dma_descriptor_slave_burst_adapter_source0_channel;       // streamR_DMA_descriptor_slave_burst_adapter:source0_channel -> streamR_DMA_descriptor_slave_agent:cp_channel
	wire          streamr_dma_descriptor_slave_burst_adapter_source0_startofpacket; // streamR_DMA_descriptor_slave_burst_adapter:source0_startofpacket -> streamR_DMA_descriptor_slave_agent:cp_startofpacket
	wire          streamr_dma_descriptor_slave_burst_adapter_source0_endofpacket;   // streamR_DMA_descriptor_slave_burst_adapter:source0_endofpacket -> streamR_DMA_descriptor_slave_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                            // cmd_mux_006:src_valid -> mm_bridge_0_s0_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_006_src_data;                                             // cmd_mux_006:src_data -> mm_bridge_0_s0_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                            // mm_bridge_0_s0_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire    [6:0] cmd_mux_006_src_channel;                                          // cmd_mux_006:src_channel -> mm_bridge_0_s0_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                    // cmd_mux_006:src_startofpacket -> mm_bridge_0_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                      // cmd_mux_006:src_endofpacket -> mm_bridge_0_s0_burst_adapter:sink0_endofpacket
	wire          mm_bridge_0_s0_burst_adapter_source0_valid;                       // mm_bridge_0_s0_burst_adapter:source0_valid -> mm_bridge_0_s0_agent:cp_valid
	wire  [117:0] mm_bridge_0_s0_burst_adapter_source0_data;                        // mm_bridge_0_s0_burst_adapter:source0_data -> mm_bridge_0_s0_agent:cp_data
	wire          mm_bridge_0_s0_burst_adapter_source0_ready;                       // mm_bridge_0_s0_agent:cp_ready -> mm_bridge_0_s0_burst_adapter:source0_ready
	wire    [6:0] mm_bridge_0_s0_burst_adapter_source0_channel;                     // mm_bridge_0_s0_burst_adapter:source0_channel -> mm_bridge_0_s0_agent:cp_channel
	wire          mm_bridge_0_s0_burst_adapter_source0_startofpacket;               // mm_bridge_0_s0_burst_adapter:source0_startofpacket -> mm_bridge_0_s0_agent:cp_startofpacket
	wire          mm_bridge_0_s0_burst_adapter_source0_endofpacket;                 // mm_bridge_0_s0_burst_adapter:source0_endofpacket -> mm_bridge_0_s0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [117:0] cmd_demux_src0_data;                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [6:0] cmd_demux_src0_channel;                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [117:0] cmd_demux_src1_data;                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [6:0] cmd_demux_src1_channel;                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [117:0] cmd_demux_src2_data;                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [6:0] cmd_demux_src2_channel;                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                             // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [117:0] cmd_demux_src3_data;                                              // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                             // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [6:0] cmd_demux_src3_channel;                                           // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                     // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                       // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [117:0] cmd_demux_src4_data;                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [6:0] cmd_demux_src4_channel;                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                             // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [117:0] cmd_demux_src5_data;                                              // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                             // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [6:0] cmd_demux_src5_channel;                                           // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                     // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                       // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                             // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [117:0] cmd_demux_src6_data;                                              // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                             // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire    [6:0] cmd_demux_src6_channel;                                           // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                     // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                       // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                         // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [117:0] cmd_demux_001_src0_data;                                          // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                         // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [6:0] cmd_demux_001_src0_channel;                                       // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                 // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                   // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                         // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [117:0] cmd_demux_001_src1_data;                                          // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                         // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [6:0] cmd_demux_001_src1_channel;                                       // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                 // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                   // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                         // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [117:0] cmd_demux_001_src2_data;                                          // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                         // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [6:0] cmd_demux_001_src2_channel;                                       // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                 // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                   // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                         // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [117:0] cmd_demux_001_src3_data;                                          // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                         // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [6:0] cmd_demux_001_src3_channel;                                       // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                 // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                   // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                         // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [117:0] cmd_demux_001_src4_data;                                          // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                         // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire    [6:0] cmd_demux_001_src4_channel;                                       // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                 // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                   // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                         // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [117:0] cmd_demux_001_src5_data;                                          // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                         // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire    [6:0] cmd_demux_001_src5_channel;                                       // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                 // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                   // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                         // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [117:0] cmd_demux_001_src6_data;                                          // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                         // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire    [6:0] cmd_demux_001_src6_channel;                                       // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                 // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                   // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [117:0] rsp_demux_src0_data;                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [6:0] rsp_demux_src0_channel;                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                             // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [117:0] rsp_demux_src1_data;                                              // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                             // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [6:0] rsp_demux_src1_channel;                                           // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                     // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                       // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [117:0] rsp_demux_001_src0_data;                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [6:0] rsp_demux_001_src0_channel;                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                         // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [117:0] rsp_demux_001_src1_data;                                          // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                         // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [6:0] rsp_demux_001_src1_channel;                                       // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                 // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                   // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [117:0] rsp_demux_002_src0_data;                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [6:0] rsp_demux_002_src0_channel;                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                         // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [117:0] rsp_demux_002_src1_data;                                          // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                         // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [6:0] rsp_demux_002_src1_channel;                                       // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                 // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                   // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                         // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [117:0] rsp_demux_003_src0_data;                                          // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                         // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [6:0] rsp_demux_003_src0_channel;                                       // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                 // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                   // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                         // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [117:0] rsp_demux_003_src1_data;                                          // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                         // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [6:0] rsp_demux_003_src1_channel;                                       // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                 // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                   // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [117:0] rsp_demux_004_src0_data;                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [6:0] rsp_demux_004_src0_channel;                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                         // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [117:0] rsp_demux_004_src1_data;                                          // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                         // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire    [6:0] rsp_demux_004_src1_channel;                                       // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                 // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                   // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                         // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [117:0] rsp_demux_005_src0_data;                                          // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                         // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [6:0] rsp_demux_005_src0_channel;                                       // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                 // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                   // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                         // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [117:0] rsp_demux_005_src1_data;                                          // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                         // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire    [6:0] rsp_demux_005_src1_channel;                                       // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                 // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                   // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                         // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [117:0] rsp_demux_006_src0_data;                                          // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                         // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire    [6:0] rsp_demux_006_src0_channel;                                       // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                 // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                   // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                         // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [117:0] rsp_demux_006_src1_data;                                          // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                         // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire    [6:0] rsp_demux_006_src1_channel;                                       // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                 // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                   // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          router_005_src_valid;                                             // router_005:src_valid -> streamA_DMA_descriptor_slave_rsp_width_adapter:in_valid
	wire  [225:0] router_005_src_data;                                              // router_005:src_data -> streamA_DMA_descriptor_slave_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                             // streamA_DMA_descriptor_slave_rsp_width_adapter:in_ready -> router_005:src_ready
	wire    [6:0] router_005_src_channel;                                           // router_005:src_channel -> streamA_DMA_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                     // router_005:src_startofpacket -> streamA_DMA_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                       // router_005:src_endofpacket -> streamA_DMA_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          streama_dma_descriptor_slave_rsp_width_adapter_src_valid;         // streamA_DMA_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [117:0] streama_dma_descriptor_slave_rsp_width_adapter_src_data;          // streamA_DMA_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          streama_dma_descriptor_slave_rsp_width_adapter_src_ready;         // rsp_demux_003:sink_ready -> streamA_DMA_descriptor_slave_rsp_width_adapter:out_ready
	wire    [6:0] streama_dma_descriptor_slave_rsp_width_adapter_src_channel;       // streamA_DMA_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          streama_dma_descriptor_slave_rsp_width_adapter_src_startofpacket; // streamA_DMA_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          streama_dma_descriptor_slave_rsp_width_adapter_src_endofpacket;   // streamA_DMA_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_006_src_valid;                                             // router_006:src_valid -> streamB_DMA_descriptor_slave_rsp_width_adapter:in_valid
	wire  [225:0] router_006_src_data;                                              // router_006:src_data -> streamB_DMA_descriptor_slave_rsp_width_adapter:in_data
	wire          router_006_src_ready;                                             // streamB_DMA_descriptor_slave_rsp_width_adapter:in_ready -> router_006:src_ready
	wire    [6:0] router_006_src_channel;                                           // router_006:src_channel -> streamB_DMA_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_006_src_startofpacket;                                     // router_006:src_startofpacket -> streamB_DMA_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                       // router_006:src_endofpacket -> streamB_DMA_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          streamb_dma_descriptor_slave_rsp_width_adapter_src_valid;         // streamB_DMA_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire  [117:0] streamb_dma_descriptor_slave_rsp_width_adapter_src_data;          // streamB_DMA_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          streamb_dma_descriptor_slave_rsp_width_adapter_src_ready;         // rsp_demux_004:sink_ready -> streamB_DMA_descriptor_slave_rsp_width_adapter:out_ready
	wire    [6:0] streamb_dma_descriptor_slave_rsp_width_adapter_src_channel;       // streamB_DMA_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          streamb_dma_descriptor_slave_rsp_width_adapter_src_startofpacket; // streamB_DMA_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          streamb_dma_descriptor_slave_rsp_width_adapter_src_endofpacket;   // streamB_DMA_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_007_src_valid;                                             // router_007:src_valid -> streamR_DMA_descriptor_slave_rsp_width_adapter:in_valid
	wire  [225:0] router_007_src_data;                                              // router_007:src_data -> streamR_DMA_descriptor_slave_rsp_width_adapter:in_data
	wire          router_007_src_ready;                                             // streamR_DMA_descriptor_slave_rsp_width_adapter:in_ready -> router_007:src_ready
	wire    [6:0] router_007_src_channel;                                           // router_007:src_channel -> streamR_DMA_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_007_src_startofpacket;                                     // router_007:src_startofpacket -> streamR_DMA_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_007_src_endofpacket;                                       // router_007:src_endofpacket -> streamR_DMA_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          streamr_dma_descriptor_slave_rsp_width_adapter_src_valid;         // streamR_DMA_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_005:sink_valid
	wire  [117:0] streamr_dma_descriptor_slave_rsp_width_adapter_src_data;          // streamR_DMA_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_005:sink_data
	wire          streamr_dma_descriptor_slave_rsp_width_adapter_src_ready;         // rsp_demux_005:sink_ready -> streamR_DMA_descriptor_slave_rsp_width_adapter:out_ready
	wire    [6:0] streamr_dma_descriptor_slave_rsp_width_adapter_src_channel;       // streamR_DMA_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_005:sink_channel
	wire          streamr_dma_descriptor_slave_rsp_width_adapter_src_startofpacket; // streamR_DMA_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          streamr_dma_descriptor_slave_rsp_width_adapter_src_endofpacket;   // streamR_DMA_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          cmd_mux_003_src_valid;                                            // cmd_mux_003:src_valid -> streamA_DMA_descriptor_slave_cmd_width_adapter:in_valid
	wire  [117:0] cmd_mux_003_src_data;                                             // cmd_mux_003:src_data -> streamA_DMA_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                            // streamA_DMA_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire    [6:0] cmd_mux_003_src_channel;                                          // cmd_mux_003:src_channel -> streamA_DMA_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                    // cmd_mux_003:src_startofpacket -> streamA_DMA_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                      // cmd_mux_003:src_endofpacket -> streamA_DMA_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          streama_dma_descriptor_slave_cmd_width_adapter_src_valid;         // streamA_DMA_descriptor_slave_cmd_width_adapter:out_valid -> streamA_DMA_descriptor_slave_burst_adapter:sink0_valid
	wire  [225:0] streama_dma_descriptor_slave_cmd_width_adapter_src_data;          // streamA_DMA_descriptor_slave_cmd_width_adapter:out_data -> streamA_DMA_descriptor_slave_burst_adapter:sink0_data
	wire          streama_dma_descriptor_slave_cmd_width_adapter_src_ready;         // streamA_DMA_descriptor_slave_burst_adapter:sink0_ready -> streamA_DMA_descriptor_slave_cmd_width_adapter:out_ready
	wire    [6:0] streama_dma_descriptor_slave_cmd_width_adapter_src_channel;       // streamA_DMA_descriptor_slave_cmd_width_adapter:out_channel -> streamA_DMA_descriptor_slave_burst_adapter:sink0_channel
	wire          streama_dma_descriptor_slave_cmd_width_adapter_src_startofpacket; // streamA_DMA_descriptor_slave_cmd_width_adapter:out_startofpacket -> streamA_DMA_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          streama_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;   // streamA_DMA_descriptor_slave_cmd_width_adapter:out_endofpacket -> streamA_DMA_descriptor_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                            // cmd_mux_004:src_valid -> streamB_DMA_descriptor_slave_cmd_width_adapter:in_valid
	wire  [117:0] cmd_mux_004_src_data;                                             // cmd_mux_004:src_data -> streamB_DMA_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                            // streamB_DMA_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire    [6:0] cmd_mux_004_src_channel;                                          // cmd_mux_004:src_channel -> streamB_DMA_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                                    // cmd_mux_004:src_startofpacket -> streamB_DMA_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                      // cmd_mux_004:src_endofpacket -> streamB_DMA_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          streamb_dma_descriptor_slave_cmd_width_adapter_src_valid;         // streamB_DMA_descriptor_slave_cmd_width_adapter:out_valid -> streamB_DMA_descriptor_slave_burst_adapter:sink0_valid
	wire  [225:0] streamb_dma_descriptor_slave_cmd_width_adapter_src_data;          // streamB_DMA_descriptor_slave_cmd_width_adapter:out_data -> streamB_DMA_descriptor_slave_burst_adapter:sink0_data
	wire          streamb_dma_descriptor_slave_cmd_width_adapter_src_ready;         // streamB_DMA_descriptor_slave_burst_adapter:sink0_ready -> streamB_DMA_descriptor_slave_cmd_width_adapter:out_ready
	wire    [6:0] streamb_dma_descriptor_slave_cmd_width_adapter_src_channel;       // streamB_DMA_descriptor_slave_cmd_width_adapter:out_channel -> streamB_DMA_descriptor_slave_burst_adapter:sink0_channel
	wire          streamb_dma_descriptor_slave_cmd_width_adapter_src_startofpacket; // streamB_DMA_descriptor_slave_cmd_width_adapter:out_startofpacket -> streamB_DMA_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          streamb_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;   // streamB_DMA_descriptor_slave_cmd_width_adapter:out_endofpacket -> streamB_DMA_descriptor_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                            // cmd_mux_005:src_valid -> streamR_DMA_descriptor_slave_cmd_width_adapter:in_valid
	wire  [117:0] cmd_mux_005_src_data;                                             // cmd_mux_005:src_data -> streamR_DMA_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_005_src_ready;                                            // streamR_DMA_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_005:src_ready
	wire    [6:0] cmd_mux_005_src_channel;                                          // cmd_mux_005:src_channel -> streamR_DMA_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_005_src_startofpacket;                                    // cmd_mux_005:src_startofpacket -> streamR_DMA_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                      // cmd_mux_005:src_endofpacket -> streamR_DMA_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          streamr_dma_descriptor_slave_cmd_width_adapter_src_valid;         // streamR_DMA_descriptor_slave_cmd_width_adapter:out_valid -> streamR_DMA_descriptor_slave_burst_adapter:sink0_valid
	wire  [225:0] streamr_dma_descriptor_slave_cmd_width_adapter_src_data;          // streamR_DMA_descriptor_slave_cmd_width_adapter:out_data -> streamR_DMA_descriptor_slave_burst_adapter:sink0_data
	wire          streamr_dma_descriptor_slave_cmd_width_adapter_src_ready;         // streamR_DMA_descriptor_slave_burst_adapter:sink0_ready -> streamR_DMA_descriptor_slave_cmd_width_adapter:out_ready
	wire    [6:0] streamr_dma_descriptor_slave_cmd_width_adapter_src_channel;       // streamR_DMA_descriptor_slave_cmd_width_adapter:out_channel -> streamR_DMA_descriptor_slave_burst_adapter:sink0_channel
	wire          streamr_dma_descriptor_slave_cmd_width_adapter_src_startofpacket; // streamR_DMA_descriptor_slave_cmd_width_adapter:out_startofpacket -> streamR_DMA_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          streamr_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;   // streamR_DMA_descriptor_slave_cmd_width_adapter:out_endofpacket -> streamR_DMA_descriptor_slave_burst_adapter:sink0_endofpacket
	wire    [6:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [6:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          streama_dma_csr_agent_rdata_fifo_out_valid;                       // streamA_DMA_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] streama_dma_csr_agent_rdata_fifo_out_data;                        // streamA_DMA_csr_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          streama_dma_csr_agent_rdata_fifo_out_ready;                       // avalon_st_adapter:in_0_ready -> streamA_DMA_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                    // avalon_st_adapter:out_0_valid -> streamA_DMA_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                     // avalon_st_adapter:out_0_data -> streamA_DMA_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                    // streamA_DMA_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                    // avalon_st_adapter:out_0_error -> streamA_DMA_csr_agent:rdata_fifo_sink_error
	wire          streamb_dma_csr_agent_rdata_fifo_out_valid;                       // streamB_DMA_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] streamb_dma_csr_agent_rdata_fifo_out_data;                        // streamB_DMA_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          streamb_dma_csr_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_001:in_0_ready -> streamB_DMA_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                // avalon_st_adapter_001:out_0_valid -> streamB_DMA_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                 // avalon_st_adapter_001:out_0_data -> streamB_DMA_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                // streamB_DMA_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                // avalon_st_adapter_001:out_0_error -> streamB_DMA_csr_agent:rdata_fifo_sink_error
	wire          streamr_dma_csr_agent_rdata_fifo_out_valid;                       // streamR_DMA_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] streamr_dma_csr_agent_rdata_fifo_out_data;                        // streamR_DMA_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          streamr_dma_csr_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_002:in_0_ready -> streamR_DMA_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                // avalon_st_adapter_002:out_0_valid -> streamR_DMA_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                 // avalon_st_adapter_002:out_0_data -> streamR_DMA_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                // streamR_DMA_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                // avalon_st_adapter_002:out_0_error -> streamR_DMA_csr_agent:rdata_fifo_sink_error
	wire          streama_dma_descriptor_slave_agent_rdata_fifo_out_valid;          // streamA_DMA_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire  [129:0] streama_dma_descriptor_slave_agent_rdata_fifo_out_data;           // streamA_DMA_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          streama_dma_descriptor_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_003:in_0_ready -> streamA_DMA_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                // avalon_st_adapter_003:out_0_valid -> streamA_DMA_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_003_out_0_data;                                 // avalon_st_adapter_003:out_0_data -> streamA_DMA_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                // streamA_DMA_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                // avalon_st_adapter_003:out_0_error -> streamA_DMA_descriptor_slave_agent:rdata_fifo_sink_error
	wire          streamb_dma_descriptor_slave_agent_rdata_fifo_out_valid;          // streamB_DMA_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire  [129:0] streamb_dma_descriptor_slave_agent_rdata_fifo_out_data;           // streamB_DMA_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          streamb_dma_descriptor_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_004:in_0_ready -> streamB_DMA_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                // avalon_st_adapter_004:out_0_valid -> streamB_DMA_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_004_out_0_data;                                 // avalon_st_adapter_004:out_0_data -> streamB_DMA_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                // streamB_DMA_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                // avalon_st_adapter_004:out_0_error -> streamB_DMA_descriptor_slave_agent:rdata_fifo_sink_error
	wire          streamr_dma_descriptor_slave_agent_rdata_fifo_out_valid;          // streamR_DMA_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire  [129:0] streamr_dma_descriptor_slave_agent_rdata_fifo_out_data;           // streamR_DMA_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          streamr_dma_descriptor_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_005:in_0_ready -> streamR_DMA_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                // avalon_st_adapter_005:out_0_valid -> streamR_DMA_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_005_out_0_data;                                 // avalon_st_adapter_005:out_0_data -> streamR_DMA_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                // streamR_DMA_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                // avalon_st_adapter_005:out_0_error -> streamR_DMA_descriptor_slave_agent:rdata_fifo_sink_error
	wire          mm_bridge_0_s0_agent_rdata_fifo_out_valid;                        // mm_bridge_0_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] mm_bridge_0_s0_agent_rdata_fifo_out_data;                         // mm_bridge_0_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          mm_bridge_0_s0_agent_rdata_fifo_out_ready;                        // avalon_st_adapter_006:in_0_ready -> mm_bridge_0_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                // avalon_st_adapter_006:out_0_valid -> mm_bridge_0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                 // avalon_st_adapter_006:out_0_data -> mm_bridge_0_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                // mm_bridge_0_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                // avalon_st_adapter_006:out_0_error -> mm_bridge_0_s0_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) streama_dma_csr_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (streamA_DMA_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (streama_dma_csr_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (streama_dma_csr_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (streama_dma_csr_agent_m0_read),                   //                         .read
		.uav_write              (streama_dma_csr_agent_m0_write),                  //                         .write
		.uav_waitrequest        (streama_dma_csr_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (streama_dma_csr_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (streama_dma_csr_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (streama_dma_csr_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (streama_dma_csr_agent_m0_writedata),              //                         .writedata
		.uav_lock               (streama_dma_csr_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (streama_dma_csr_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (streamA_DMA_csr_address),                         //      avalon_anti_slave_0.address
		.av_write               (streamA_DMA_csr_write),                           //                         .write
		.av_read                (streamA_DMA_csr_read),                            //                         .read
		.av_readdata            (streamA_DMA_csr_readdata),                        //                         .readdata
		.av_writedata           (streamA_DMA_csr_writedata),                       //                         .writedata
		.av_byteenable          (streamA_DMA_csr_byteenable),                      //                         .byteenable
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) streamb_dma_csr_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (streamA_DMA_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (streamb_dma_csr_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (streamb_dma_csr_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (streamb_dma_csr_agent_m0_read),                   //                         .read
		.uav_write              (streamb_dma_csr_agent_m0_write),                  //                         .write
		.uav_waitrequest        (streamb_dma_csr_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (streamb_dma_csr_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (streamb_dma_csr_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (streamb_dma_csr_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (streamb_dma_csr_agent_m0_writedata),              //                         .writedata
		.uav_lock               (streamb_dma_csr_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (streamb_dma_csr_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (streamB_DMA_csr_address),                         //      avalon_anti_slave_0.address
		.av_write               (streamB_DMA_csr_write),                           //                         .write
		.av_read                (streamB_DMA_csr_read),                            //                         .read
		.av_readdata            (streamB_DMA_csr_readdata),                        //                         .readdata
		.av_writedata           (streamB_DMA_csr_writedata),                       //                         .writedata
		.av_byteenable          (streamB_DMA_csr_byteenable),                      //                         .byteenable
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) streamr_dma_csr_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (streamA_DMA_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (streamr_dma_csr_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (streamr_dma_csr_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (streamr_dma_csr_agent_m0_read),                   //                         .read
		.uav_write              (streamr_dma_csr_agent_m0_write),                  //                         .write
		.uav_waitrequest        (streamr_dma_csr_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (streamr_dma_csr_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (streamr_dma_csr_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (streamr_dma_csr_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (streamr_dma_csr_agent_m0_writedata),              //                         .writedata
		.uav_lock               (streamr_dma_csr_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (streamr_dma_csr_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (streamR_DMA_csr_address),                         //      avalon_anti_slave_0.address
		.av_write               (streamR_DMA_csr_write),                           //                         .write
		.av_read                (streamR_DMA_csr_read),                            //                         .read
		.av_readdata            (streamR_DMA_csr_readdata),                        //                         .readdata
		.av_writedata           (streamR_DMA_csr_writedata),                       //                         .writedata
		.av_byteenable          (streamR_DMA_csr_byteenable),                      //                         .byteenable
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) streama_dma_descriptor_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                                                                         //                      clk.clk
		.reset                  (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                                                                                       //                    reset.reset
		.uav_address            (streama_dma_descriptor_slave_agent_m0_address),                                                                                         // avalon_universal_slave_0.address
		.uav_burstcount         (streama_dma_descriptor_slave_agent_m0_burstcount),                                                                                      //                         .burstcount
		.uav_read               (streama_dma_descriptor_slave_agent_m0_read),                                                                                            //                         .read
		.uav_write              (streama_dma_descriptor_slave_agent_m0_write),                                                                                           //                         .write
		.uav_waitrequest        (streama_dma_descriptor_slave_agent_m0_waitrequest),                                                                                     //                         .waitrequest
		.uav_readdatavalid      (streama_dma_descriptor_slave_agent_m0_readdatavalid),                                                                                   //                         .readdatavalid
		.uav_byteenable         (streama_dma_descriptor_slave_agent_m0_byteenable),                                                                                      //                         .byteenable
		.uav_readdata           (streama_dma_descriptor_slave_agent_m0_readdata),                                                                                        //                         .readdata
		.uav_writedata          (streama_dma_descriptor_slave_agent_m0_writedata),                                                                                       //                         .writedata
		.uav_lock               (streama_dma_descriptor_slave_agent_m0_lock),                                                                                            //                         .lock
		.uav_debugaccess        (streama_dma_descriptor_slave_agent_m0_debugaccess),                                                                                     //                         .debugaccess
		.av_write               (streamA_DMA_descriptor_slave_write),                                                                                                    //      avalon_anti_slave_0.write
		.av_writedata           (streamA_DMA_descriptor_slave_writedata),                                                                                                //                         .writedata
		.av_byteenable          (streamA_DMA_descriptor_slave_byteenable),                                                                                               //                         .byteenable
		.av_waitrequest         (streamA_DMA_descriptor_slave_waitrequest),                                                                                              //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) streamb_dma_descriptor_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                                                                         //                      clk.clk
		.reset                  (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                                                                                       //                    reset.reset
		.uav_address            (streamb_dma_descriptor_slave_agent_m0_address),                                                                                         // avalon_universal_slave_0.address
		.uav_burstcount         (streamb_dma_descriptor_slave_agent_m0_burstcount),                                                                                      //                         .burstcount
		.uav_read               (streamb_dma_descriptor_slave_agent_m0_read),                                                                                            //                         .read
		.uav_write              (streamb_dma_descriptor_slave_agent_m0_write),                                                                                           //                         .write
		.uav_waitrequest        (streamb_dma_descriptor_slave_agent_m0_waitrequest),                                                                                     //                         .waitrequest
		.uav_readdatavalid      (streamb_dma_descriptor_slave_agent_m0_readdatavalid),                                                                                   //                         .readdatavalid
		.uav_byteenable         (streamb_dma_descriptor_slave_agent_m0_byteenable),                                                                                      //                         .byteenable
		.uav_readdata           (streamb_dma_descriptor_slave_agent_m0_readdata),                                                                                        //                         .readdata
		.uav_writedata          (streamb_dma_descriptor_slave_agent_m0_writedata),                                                                                       //                         .writedata
		.uav_lock               (streamb_dma_descriptor_slave_agent_m0_lock),                                                                                            //                         .lock
		.uav_debugaccess        (streamb_dma_descriptor_slave_agent_m0_debugaccess),                                                                                     //                         .debugaccess
		.av_write               (streamB_DMA_descriptor_slave_write),                                                                                                    //      avalon_anti_slave_0.write
		.av_writedata           (streamB_DMA_descriptor_slave_writedata),                                                                                                //                         .writedata
		.av_byteenable          (streamB_DMA_descriptor_slave_byteenable),                                                                                               //                         .byteenable
		.av_waitrequest         (streamB_DMA_descriptor_slave_waitrequest),                                                                                              //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) streamr_dma_descriptor_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                                                                         //                      clk.clk
		.reset                  (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                                                                                       //                    reset.reset
		.uav_address            (streamr_dma_descriptor_slave_agent_m0_address),                                                                                         // avalon_universal_slave_0.address
		.uav_burstcount         (streamr_dma_descriptor_slave_agent_m0_burstcount),                                                                                      //                         .burstcount
		.uav_read               (streamr_dma_descriptor_slave_agent_m0_read),                                                                                            //                         .read
		.uav_write              (streamr_dma_descriptor_slave_agent_m0_write),                                                                                           //                         .write
		.uav_waitrequest        (streamr_dma_descriptor_slave_agent_m0_waitrequest),                                                                                     //                         .waitrequest
		.uav_readdatavalid      (streamr_dma_descriptor_slave_agent_m0_readdatavalid),                                                                                   //                         .readdatavalid
		.uav_byteenable         (streamr_dma_descriptor_slave_agent_m0_byteenable),                                                                                      //                         .byteenable
		.uav_readdata           (streamr_dma_descriptor_slave_agent_m0_readdata),                                                                                        //                         .readdata
		.uav_writedata          (streamr_dma_descriptor_slave_agent_m0_writedata),                                                                                       //                         .writedata
		.uav_lock               (streamr_dma_descriptor_slave_agent_m0_lock),                                                                                            //                         .lock
		.uav_debugaccess        (streamr_dma_descriptor_slave_agent_m0_debugaccess),                                                                                     //                         .debugaccess
		.av_write               (streamR_DMA_descriptor_slave_write),                                                                                                    //      avalon_anti_slave_0.write
		.av_writedata           (streamR_DMA_descriptor_slave_writedata),                                                                                                //                         .writedata
		.av_byteenable          (streamR_DMA_descriptor_slave_byteenable),                                                                                               //                         .byteenable
		.av_waitrequest         (streamR_DMA_descriptor_slave_waitrequest),                                                                                              //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_bridge_0_s0_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (streamA_DMA_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mm_bridge_0_s0_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (mm_bridge_0_s0_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (mm_bridge_0_s0_agent_m0_read),                    //                         .read
		.uav_write              (mm_bridge_0_s0_agent_m0_write),                   //                         .write
		.uav_waitrequest        (mm_bridge_0_s0_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (mm_bridge_0_s0_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (mm_bridge_0_s0_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (mm_bridge_0_s0_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (mm_bridge_0_s0_agent_m0_writedata),               //                         .writedata
		.uav_lock               (mm_bridge_0_s0_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (mm_bridge_0_s0_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (mm_bridge_0_s0_address),                          //      avalon_anti_slave_0.address
		.av_write               (mm_bridge_0_s0_write),                            //                         .write
		.av_read                (mm_bridge_0_s0_read),                             //                         .read
		.av_readdata            (mm_bridge_0_s0_readdata),                         //                         .readdata
		.av_writedata           (mm_bridge_0_s0_writedata),                        //                         .writedata
		.av_burstcount          (mm_bridge_0_s0_burstcount),                       //                         .burstcount
		.av_byteenable          (mm_bridge_0_s0_byteenable),                       //                         .byteenable
		.av_readdatavalid       (mm_bridge_0_s0_readdatavalid),                    //                         .readdatavalid
		.av_waitrequest         (mm_bridge_0_s0_waitrequest),                      //                         .waitrequest
		.av_debugaccess         (mm_bridge_0_s0_debugaccess),                      //                         .debugaccess
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (86),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_ADDR_SIDEBAND_H       (84),
		.PKT_ADDR_SIDEBAND_L       (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (91),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (94),
		.PKT_QOS_L                 (87),
		.PKT_QOS_H                 (87),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_DATA_SIDEBAND_H       (85),
		.PKT_DATA_SIDEBAND_L       (85),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (7),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                        //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) streama_dma_csr_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (streamA_DMA_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (streama_dma_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (streama_dma_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (streama_dma_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (streama_dma_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (streama_dma_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (streama_dma_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (streama_dma_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (streama_dma_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (streama_dma_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (streama_dma_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (streama_dma_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (streama_dma_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (streama_dma_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (streama_dma_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (streama_dma_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (streama_dma_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (streama_dma_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (streama_dma_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (streama_dma_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (streama_dma_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (streama_dma_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (streama_dma_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (streama_dma_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (streama_dma_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (streama_dma_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (streama_dma_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (streama_dma_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (streama_dma_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (streama_dma_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (streama_dma_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (streama_dma_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (streama_dma_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (streama_dma_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (streama_dma_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (streama_dma_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) streama_dma_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (streama_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (streama_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (streama_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (streama_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (streama_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (streama_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (streama_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (streama_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (streama_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (streama_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) streama_dma_csr_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (streama_dma_csr_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (streama_dma_csr_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (streama_dma_csr_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (streama_dma_csr_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (streama_dma_csr_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (streama_dma_csr_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) streamb_dma_csr_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (streamA_DMA_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (streamb_dma_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (streamb_dma_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (streamb_dma_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (streamb_dma_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (streamb_dma_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (streamb_dma_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (streamb_dma_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (streamb_dma_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (streamb_dma_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (streamb_dma_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (streamb_dma_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (streamb_dma_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (streamb_dma_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (streamb_dma_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (streamb_dma_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (streamb_dma_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (streamb_dma_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (streamb_dma_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (streamb_dma_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (streamb_dma_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (streamb_dma_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (streamb_dma_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (streamb_dma_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (streamb_dma_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (streamb_dma_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (streamb_dma_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (streamb_dma_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (streamb_dma_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (streamb_dma_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (streamb_dma_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (streamb_dma_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (streamb_dma_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (streamb_dma_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (streamb_dma_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (streamb_dma_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) streamb_dma_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (streamb_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (streamb_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (streamb_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (streamb_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (streamb_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (streamb_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (streamb_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (streamb_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (streamb_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (streamb_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) streamb_dma_csr_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (streamb_dma_csr_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (streamb_dma_csr_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (streamb_dma_csr_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (streamb_dma_csr_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (streamb_dma_csr_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (streamb_dma_csr_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) streamr_dma_csr_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (streamA_DMA_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (streamr_dma_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (streamr_dma_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (streamr_dma_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (streamr_dma_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (streamr_dma_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (streamr_dma_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (streamr_dma_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (streamr_dma_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (streamr_dma_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (streamr_dma_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (streamr_dma_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (streamr_dma_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (streamr_dma_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (streamr_dma_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (streamr_dma_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (streamr_dma_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (streamr_dma_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (streamr_dma_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (streamr_dma_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (streamr_dma_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (streamr_dma_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (streamr_dma_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (streamr_dma_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (streamr_dma_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (streamr_dma_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (streamr_dma_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (streamr_dma_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (streamr_dma_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (streamr_dma_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (streamr_dma_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (streamr_dma_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (streamr_dma_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (streamr_dma_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (streamr_dma_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (streamr_dma_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) streamr_dma_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (streamr_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (streamr_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (streamr_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (streamr_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (streamr_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (streamr_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (streamr_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (streamr_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (streamr_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (streamr_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) streamr_dma_csr_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (streamr_dma_csr_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (streamr_dma_csr_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (streamr_dma_csr_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (streamr_dma_csr_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (streamr_dma_csr_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (streamr_dma_csr_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (225),
		.PKT_ORI_BURST_SIZE_L      (223),
		.PKT_RESPONSE_STATUS_H     (222),
		.PKT_RESPONSE_STATUS_L     (221),
		.PKT_BURST_SIZE_H          (189),
		.PKT_BURST_SIZE_L          (187),
		.PKT_TRANS_LOCK            (169),
		.PKT_BEGIN_BURST           (194),
		.PKT_PROTECTION_H          (216),
		.PKT_PROTECTION_L          (214),
		.PKT_BURSTWRAP_H           (186),
		.PKT_BURSTWRAP_L           (180),
		.PKT_BYTE_CNT_H            (179),
		.PKT_BYTE_CNT_L            (171),
		.PKT_ADDR_H                (164),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (165),
		.PKT_TRANS_POSTED          (166),
		.PKT_TRANS_WRITE           (167),
		.PKT_TRANS_READ            (168),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (198),
		.PKT_SRC_ID_L              (196),
		.PKT_DEST_ID_H             (201),
		.PKT_DEST_ID_L             (199),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (226),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) streama_dma_descriptor_slave_agent (
		.clk                     (clk_0_clk_clk),                                                    //             clk.clk
		.reset                   (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (streama_dma_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (streama_dma_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (streama_dma_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (streama_dma_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (streama_dma_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (streama_dma_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (streama_dma_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (streama_dma_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (streama_dma_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (streama_dma_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (streama_dma_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (streama_dma_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (streama_dma_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (streama_dma_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (streama_dma_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (streama_dma_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (streama_dma_descriptor_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (streama_dma_descriptor_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (streama_dma_descriptor_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (streama_dma_descriptor_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (streama_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (streama_dma_descriptor_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (streama_dma_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (streama_dma_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (streama_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (streama_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (streama_dma_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (streama_dma_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (streama_dma_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (streama_dma_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (streama_dma_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (streama_dma_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (streama_dma_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (streama_dma_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (streama_dma_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (227),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) streama_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (streama_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (streama_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (streama_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (streama_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (streama_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (streama_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (streama_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (streama_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (streama_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (streama_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) streama_dma_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (streama_dma_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (streama_dma_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (streama_dma_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (streama_dma_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (streama_dma_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (streama_dma_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (225),
		.PKT_ORI_BURST_SIZE_L      (223),
		.PKT_RESPONSE_STATUS_H     (222),
		.PKT_RESPONSE_STATUS_L     (221),
		.PKT_BURST_SIZE_H          (189),
		.PKT_BURST_SIZE_L          (187),
		.PKT_TRANS_LOCK            (169),
		.PKT_BEGIN_BURST           (194),
		.PKT_PROTECTION_H          (216),
		.PKT_PROTECTION_L          (214),
		.PKT_BURSTWRAP_H           (186),
		.PKT_BURSTWRAP_L           (180),
		.PKT_BYTE_CNT_H            (179),
		.PKT_BYTE_CNT_L            (171),
		.PKT_ADDR_H                (164),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (165),
		.PKT_TRANS_POSTED          (166),
		.PKT_TRANS_WRITE           (167),
		.PKT_TRANS_READ            (168),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (198),
		.PKT_SRC_ID_L              (196),
		.PKT_DEST_ID_H             (201),
		.PKT_DEST_ID_L             (199),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (226),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) streamb_dma_descriptor_slave_agent (
		.clk                     (clk_0_clk_clk),                                                    //             clk.clk
		.reset                   (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (streamb_dma_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (streamb_dma_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (streamb_dma_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (streamb_dma_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (streamb_dma_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (streamb_dma_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (streamb_dma_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (streamb_dma_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (streamb_dma_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (streamb_dma_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (streamb_dma_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (streamb_dma_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (streamb_dma_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (streamb_dma_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (streamb_dma_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (streamb_dma_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (streamb_dma_descriptor_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (streamb_dma_descriptor_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (streamb_dma_descriptor_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (streamb_dma_descriptor_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (streamb_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (streamb_dma_descriptor_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (streamb_dma_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (streamb_dma_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (streamb_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (streamb_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (streamb_dma_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (streamb_dma_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (streamb_dma_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (streamb_dma_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (streamb_dma_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (streamb_dma_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (streamb_dma_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (streamb_dma_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (streamb_dma_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (227),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) streamb_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (streamb_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (streamb_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (streamb_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (streamb_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (streamb_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (streamb_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (streamb_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (streamb_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (streamb_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (streamb_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) streamb_dma_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (streamb_dma_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (streamb_dma_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (streamb_dma_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (streamb_dma_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (streamb_dma_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (streamb_dma_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (225),
		.PKT_ORI_BURST_SIZE_L      (223),
		.PKT_RESPONSE_STATUS_H     (222),
		.PKT_RESPONSE_STATUS_L     (221),
		.PKT_BURST_SIZE_H          (189),
		.PKT_BURST_SIZE_L          (187),
		.PKT_TRANS_LOCK            (169),
		.PKT_BEGIN_BURST           (194),
		.PKT_PROTECTION_H          (216),
		.PKT_PROTECTION_L          (214),
		.PKT_BURSTWRAP_H           (186),
		.PKT_BURSTWRAP_L           (180),
		.PKT_BYTE_CNT_H            (179),
		.PKT_BYTE_CNT_L            (171),
		.PKT_ADDR_H                (164),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (165),
		.PKT_TRANS_POSTED          (166),
		.PKT_TRANS_WRITE           (167),
		.PKT_TRANS_READ            (168),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (198),
		.PKT_SRC_ID_L              (196),
		.PKT_DEST_ID_H             (201),
		.PKT_DEST_ID_L             (199),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (226),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) streamr_dma_descriptor_slave_agent (
		.clk                     (clk_0_clk_clk),                                                    //             clk.clk
		.reset                   (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (streamr_dma_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (streamr_dma_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (streamr_dma_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (streamr_dma_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (streamr_dma_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (streamr_dma_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (streamr_dma_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (streamr_dma_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (streamr_dma_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (streamr_dma_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (streamr_dma_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (streamr_dma_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (streamr_dma_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (streamr_dma_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (streamr_dma_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (streamr_dma_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (streamr_dma_descriptor_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (streamr_dma_descriptor_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (streamr_dma_descriptor_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (streamr_dma_descriptor_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (streamr_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (streamr_dma_descriptor_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (streamr_dma_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (streamr_dma_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (streamr_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (streamr_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (streamr_dma_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (streamr_dma_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (streamr_dma_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (streamr_dma_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (streamr_dma_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (streamr_dma_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (streamr_dma_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (streamr_dma_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (streamr_dma_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (227),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) streamr_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (streamr_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (streamr_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (streamr_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (streamr_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (streamr_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (streamr_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (streamr_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (streamr_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (streamr_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (streamr_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) streamr_dma_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (streamr_dma_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (streamr_dma_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (streamr_dma_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (streamr_dma_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (streamr_dma_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (streamr_dma_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mm_bridge_0_s0_agent (
		.clk                     (clk_0_clk_clk),                                      //             clk.clk
		.reset                   (streamA_DMA_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (mm_bridge_0_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (mm_bridge_0_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (mm_bridge_0_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (mm_bridge_0_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (mm_bridge_0_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (mm_bridge_0_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (mm_bridge_0_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (mm_bridge_0_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (mm_bridge_0_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (mm_bridge_0_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (mm_bridge_0_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (mm_bridge_0_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (mm_bridge_0_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (mm_bridge_0_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (mm_bridge_0_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (mm_bridge_0_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (mm_bridge_0_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (mm_bridge_0_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (mm_bridge_0_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (mm_bridge_0_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (mm_bridge_0_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (mm_bridge_0_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (mm_bridge_0_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (mm_bridge_0_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (mm_bridge_0_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (mm_bridge_0_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (mm_bridge_0_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (mm_bridge_0_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (mm_bridge_0_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (mm_bridge_0_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (mm_bridge_0_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (mm_bridge_0_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (mm_bridge_0_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_bridge_0_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (mm_bridge_0_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_bridge_0_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mm_bridge_0_s0_agent_rf_source_data),             //        in.data
		.in_valid          (mm_bridge_0_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (mm_bridge_0_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mm_bridge_0_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mm_bridge_0_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mm_bridge_0_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mm_bridge_0_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mm_bridge_0_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mm_bridge_0_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mm_bridge_0_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_bridge_0_s0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mm_bridge_0_s0_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (mm_bridge_0_s0_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (mm_bridge_0_s0_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (mm_bridge_0_s0_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (mm_bridge_0_s0_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (mm_bridge_0_s0_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	soc_system_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                    //       src.ready
		.src_valid          (router_src_valid),                                                    //          .valid
		.src_data           (router_src_data),                                                     //          .data
		.src_channel        (router_src_channel),                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //          .endofpacket
	);

	soc_system_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (streama_dma_csr_agent_rp_ready),                  //      sink.ready
		.sink_valid         (streama_dma_csr_agent_rp_valid),                  //          .valid
		.sink_data          (streama_dma_csr_agent_rp_data),                   //          .data
		.sink_startofpacket (streama_dma_csr_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (streama_dma_csr_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                            //       src.ready
		.src_valid          (router_002_src_valid),                            //          .valid
		.src_data           (router_002_src_data),                             //          .data
		.src_channel        (router_002_src_channel),                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (streamb_dma_csr_agent_rp_ready),                  //      sink.ready
		.sink_valid         (streamb_dma_csr_agent_rp_valid),                  //          .valid
		.sink_data          (streamb_dma_csr_agent_rp_data),                   //          .data
		.sink_startofpacket (streamb_dma_csr_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (streamb_dma_csr_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                            //       src.ready
		.src_valid          (router_003_src_valid),                            //          .valid
		.src_data           (router_003_src_data),                             //          .data
		.src_channel        (router_003_src_channel),                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (streamr_dma_csr_agent_rp_ready),                  //      sink.ready
		.sink_valid         (streamr_dma_csr_agent_rp_valid),                  //          .valid
		.sink_data          (streamr_dma_csr_agent_rp_data),                   //          .data
		.sink_startofpacket (streamr_dma_csr_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (streamr_dma_csr_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                            //       src.ready
		.src_valid          (router_004_src_valid),                            //          .valid
		.src_data           (router_004_src_data),                             //          .data
		.src_channel        (router_004_src_channel),                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (streama_dma_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (streama_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (streama_dma_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (streama_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (streama_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_005_src_ready),                                //       src.ready
		.src_valid          (router_005_src_valid),                                //          .valid
		.src_data           (router_005_src_data),                                 //          .data
		.src_channel        (router_005_src_channel),                              //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_005 router_006 (
		.sink_ready         (streamb_dma_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (streamb_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (streamb_dma_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (streamb_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (streamb_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_006_src_ready),                                //       src.ready
		.src_valid          (router_006_src_valid),                                //          .valid
		.src_data           (router_006_src_data),                                 //          .data
		.src_channel        (router_006_src_channel),                              //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_005 router_007 (
		.sink_ready         (streamr_dma_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (streamr_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (streamr_dma_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (streamr_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (streamr_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_007_src_ready),                                //       src.ready
		.src_valid          (router_007_src_valid),                                //          .valid
		.src_data           (router_007_src_data),                                 //          .data
		.src_channel        (router_007_src_channel),                              //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (mm_bridge_0_s0_agent_rp_ready),                   //      sink.ready
		.sink_valid         (mm_bridge_0_s0_agent_rp_valid),                   //          .valid
		.sink_data          (mm_bridge_0_s0_agent_rp_data),                    //          .data
		.sink_startofpacket (mm_bridge_0_s0_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_s0_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                            //       src.ready
		.src_valid          (router_008_src_valid),                            //          .valid
		.src_data           (router_008_src_data),                             //          .data
		.src_channel        (router_008_src_channel),                          //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                       //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (88),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (6),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                    //          .valid
		.cmd_sink_data          (router_src_data),                                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                              //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (88),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (6),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) streama_dma_csr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (streamA_DMA_reset_n_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                   //          .ready
		.source0_valid         (streama_dma_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (streama_dma_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (streama_dma_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (streama_dma_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (streama_dma_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (streama_dma_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) streamb_dma_csr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (streamA_DMA_reset_n_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                               //          .ready
		.source0_valid         (streamb_dma_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (streamb_dma_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (streamb_dma_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (streamb_dma_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (streamb_dma_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (streamb_dma_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) streamr_dma_csr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (streamA_DMA_reset_n_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                               //          .ready
		.source0_valid         (streamr_dma_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (streamr_dma_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (streamr_dma_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (streamr_dma_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (streamr_dma_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (streamr_dma_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (164),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (194),
		.PKT_BYTE_CNT_H            (179),
		.PKT_BYTE_CNT_L            (171),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (189),
		.PKT_BURST_SIZE_L          (187),
		.PKT_BURST_TYPE_H          (191),
		.PKT_BURST_TYPE_L          (190),
		.PKT_BURSTWRAP_H           (186),
		.PKT_BURSTWRAP_L           (180),
		.PKT_TRANS_COMPRESSED_READ (165),
		.PKT_TRANS_WRITE           (167),
		.PKT_TRANS_READ            (168),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (226),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (175),
		.OUT_BURSTWRAP_H           (186),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) streama_dma_descriptor_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                    //       cr0.clk
		.reset                 (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (streama_dma_descriptor_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (streama_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (streama_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (streama_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (streama_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (streama_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (streama_dma_descriptor_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (streama_dma_descriptor_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (streama_dma_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (streama_dma_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (streama_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (streama_dma_descriptor_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (164),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (194),
		.PKT_BYTE_CNT_H            (179),
		.PKT_BYTE_CNT_L            (171),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (189),
		.PKT_BURST_SIZE_L          (187),
		.PKT_BURST_TYPE_H          (191),
		.PKT_BURST_TYPE_L          (190),
		.PKT_BURSTWRAP_H           (186),
		.PKT_BURSTWRAP_L           (180),
		.PKT_TRANS_COMPRESSED_READ (165),
		.PKT_TRANS_WRITE           (167),
		.PKT_TRANS_READ            (168),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (226),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (175),
		.OUT_BURSTWRAP_H           (186),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) streamb_dma_descriptor_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                    //       cr0.clk
		.reset                 (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (streamb_dma_descriptor_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (streamb_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (streamb_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (streamb_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (streamb_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (streamb_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (streamb_dma_descriptor_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (streamb_dma_descriptor_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (streamb_dma_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (streamb_dma_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (streamb_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (streamb_dma_descriptor_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (164),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (194),
		.PKT_BYTE_CNT_H            (179),
		.PKT_BYTE_CNT_L            (171),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (189),
		.PKT_BURST_SIZE_L          (187),
		.PKT_BURST_TYPE_H          (191),
		.PKT_BURST_TYPE_L          (190),
		.PKT_BURSTWRAP_H           (186),
		.PKT_BURSTWRAP_L           (180),
		.PKT_TRANS_COMPRESSED_READ (165),
		.PKT_TRANS_WRITE           (167),
		.PKT_TRANS_READ            (168),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (226),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (175),
		.OUT_BURSTWRAP_H           (186),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) streamr_dma_descriptor_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                    //       cr0.clk
		.reset                 (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (streamr_dma_descriptor_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (streamr_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (streamr_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (streamr_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (streamr_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (streamr_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (streamr_dma_descriptor_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (streamr_dma_descriptor_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (streamr_dma_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (streamr_dma_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (streamr_dma_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (streamr_dma_descriptor_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) mm_bridge_0_s0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                      //       cr0.clk
		.reset                 (streamA_DMA_reset_n_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                               //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                              //          .ready
		.source0_valid         (mm_bridge_0_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (mm_bridge_0_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (mm_bridge_0_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (mm_bridge_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (mm_bridge_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (mm_bridge_0_s0_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                //           .valid
		.src0_data          (cmd_demux_src0_data),                                                 //           .data
		.src0_channel       (cmd_demux_src0_channel),                                              //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                          //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                //           .valid
		.src1_data          (cmd_demux_src1_data),                                                 //           .data
		.src1_channel       (cmd_demux_src1_channel),                                              //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                          //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                //           .valid
		.src2_data          (cmd_demux_src2_data),                                                 //           .data
		.src2_channel       (cmd_demux_src2_channel),                                              //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                          //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                //           .valid
		.src3_data          (cmd_demux_src3_data),                                                 //           .data
		.src3_channel       (cmd_demux_src3_channel),                                              //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                        //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                          //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                                //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                                //           .valid
		.src4_data          (cmd_demux_src4_data),                                                 //           .data
		.src4_channel       (cmd_demux_src4_channel),                                              //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                        //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                          //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                                //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                                //           .valid
		.src5_data          (cmd_demux_src5_data),                                                 //           .data
		.src5_channel       (cmd_demux_src5_channel),                                              //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                                        //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                                          //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                                //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                                //           .valid
		.src6_data          (cmd_demux_src6_data),                                                 //           .data
		.src6_channel       (cmd_demux_src6_channel),                                              //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                                        //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket)                                           //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                                      //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                                            //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                                            //           .valid
		.src4_data          (cmd_demux_001_src4_data),                                             //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                                          //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                                      //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                                            //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                                            //           .valid
		.src5_data          (cmd_demux_001_src5_data),                                             //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                                          //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),                                      //           .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                                            //       src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                                            //           .valid
		.src6_data          (cmd_demux_001_src6_data),                                             //           .data
		.src6_channel       (cmd_demux_001_src6_channel),                                          //           .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket)                                       //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                               //          .valid
		.src_data            (cmd_mux_src_data),                                //          .data
		.src_channel         (cmd_mux_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                          //          .channel
		.sink0_data          (cmd_demux_src0_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                           //          .valid
		.src_data            (cmd_mux_001_src_data),                            //          .data
		.src_channel         (cmd_mux_001_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                          //          .channel
		.sink0_data          (cmd_demux_src1_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                           //          .valid
		.src_data            (cmd_mux_002_src_data),                            //          .data
		.src_channel         (cmd_mux_002_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                          //          .channel
		.sink0_data          (cmd_demux_src2_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                           //          .valid
		.src_data            (cmd_mux_003_src_data),                            //          .data
		.src_channel         (cmd_mux_003_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                          //          .channel
		.sink0_data          (cmd_demux_src3_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                           //          .valid
		.src_data            (cmd_mux_004_src_data),                            //          .data
		.src_channel         (cmd_mux_004_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                          //          .channel
		.sink0_data          (cmd_demux_src4_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                           //          .valid
		.src_data            (cmd_mux_005_src_data),                            //          .data
		.src_channel         (cmd_mux_005_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                          //          .channel
		.sink0_data          (cmd_demux_src5_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                           //          .valid
		.src_data            (cmd_mux_006_src_data),                            //          .data
		.src_channel         (cmd_mux_006_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                          //          .channel
		.sink0_data          (cmd_demux_src6_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                        //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                      //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                         //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                            //      sink.ready
		.sink_channel       (router_002_src_channel),                          //          .channel
		.sink_data          (router_002_src_data),                             //          .data
		.sink_startofpacket (router_002_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_002_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_src0_data),                             //          .data
		.src0_channel       (rsp_demux_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_src1_data),                             //          .data
		.src1_channel       (rsp_demux_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                            //      sink.ready
		.sink_channel       (router_003_src_channel),                          //          .channel
		.sink_data          (router_003_src_data),                             //          .data
		.sink_startofpacket (router_003_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_003_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_001_src0_data),                         //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_001_src1_data),                         //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                            //      sink.ready
		.sink_channel       (router_004_src_channel),                          //          .channel
		.sink_data          (router_004_src_data),                             //          .data
		.sink_startofpacket (router_004_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_004_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_002_src0_data),                         //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_002_src1_data),                         //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (streama_dma_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (streama_dma_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (streama_dma_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (streama_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (streama_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (streama_dma_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                                   //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                         //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                         //          .valid
		.src1_data          (rsp_demux_003_src1_data),                                          //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                                       //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (streamb_dma_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (streamb_dma_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (streamb_dma_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (streamb_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (streamb_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (streamb_dma_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                                   //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                                         //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                                         //          .valid
		.src1_data          (rsp_demux_004_src1_data),                                          //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                                       //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (streamr_dma_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (streamr_dma_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (streamr_dma_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (streamr_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (streamr_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (streamr_dma_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                                   //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                                         //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                                         //          .valid
		.src1_data          (rsp_demux_005_src1_data),                                          //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                                       //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                            //      sink.ready
		.sink_channel       (router_008_src_channel),                          //          .channel
		.sink_data          (router_008_src_data),                             //          .data
		.sink_startofpacket (router_008_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_008_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_006_src0_data),                         //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_006_src1_data),                         //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                   //          .valid
		.src_data            (rsp_mux_src_data),                                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                      //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                            //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                            //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                          //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                             //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                      //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                            //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                            //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                          //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                             //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                                      //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                            //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                            //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                          //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                             //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                                      //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                                            //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                                            //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                                          //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                                             //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src1_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                                      //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                                            //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                                            //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                                          //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                                             //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket),                                      //          .endofpacket
		.sink4_ready         (rsp_demux_004_src1_ready),                                            //     sink4.ready
		.sink4_valid         (rsp_demux_004_src1_valid),                                            //          .valid
		.sink4_channel       (rsp_demux_004_src1_channel),                                          //          .channel
		.sink4_data          (rsp_demux_004_src1_data),                                             //          .data
		.sink4_startofpacket (rsp_demux_004_src1_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src1_endofpacket),                                      //          .endofpacket
		.sink5_ready         (rsp_demux_005_src1_ready),                                            //     sink5.ready
		.sink5_valid         (rsp_demux_005_src1_valid),                                            //          .valid
		.sink5_channel       (rsp_demux_005_src1_channel),                                          //          .channel
		.sink5_data          (rsp_demux_005_src1_data),                                             //          .data
		.sink5_startofpacket (rsp_demux_005_src1_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src1_endofpacket),                                      //          .endofpacket
		.sink6_ready         (rsp_demux_006_src1_ready),                                            //     sink6.ready
		.sink6_valid         (rsp_demux_006_src1_valid),                                            //          .valid
		.sink6_channel       (rsp_demux_006_src1_channel),                                          //          .channel
		.sink6_data          (rsp_demux_006_src1_data),                                             //          .data
		.sink6_startofpacket (rsp_demux_006_src1_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src1_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (164),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (179),
		.IN_PKT_BYTE_CNT_L             (171),
		.IN_PKT_TRANS_COMPRESSED_READ  (165),
		.IN_PKT_TRANS_WRITE            (167),
		.IN_PKT_BURSTWRAP_H            (186),
		.IN_PKT_BURSTWRAP_L            (180),
		.IN_PKT_BURST_SIZE_H           (189),
		.IN_PKT_BURST_SIZE_L           (187),
		.IN_PKT_RESPONSE_STATUS_H      (222),
		.IN_PKT_RESPONSE_STATUS_L      (221),
		.IN_PKT_TRANS_EXCLUSIVE        (170),
		.IN_PKT_BURST_TYPE_H           (191),
		.IN_PKT_BURST_TYPE_L           (190),
		.IN_PKT_ORI_BURST_SIZE_L       (223),
		.IN_PKT_ORI_BURST_SIZE_H       (225),
		.IN_ST_DATA_W                  (226),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (114),
		.OUT_PKT_RESPONSE_STATUS_L     (113),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (115),
		.OUT_PKT_ORI_BURST_SIZE_H      (117),
		.OUT_ST_DATA_W                 (118),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) streama_dma_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_005_src_valid),                                             //      sink.valid
		.in_channel           (router_005_src_channel),                                           //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                                       //          .endofpacket
		.in_ready             (router_005_src_ready),                                             //          .ready
		.in_data              (router_005_src_data),                                              //          .data
		.out_endofpacket      (streama_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (streama_dma_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (streama_dma_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (streama_dma_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (streama_dma_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (streama_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (164),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (179),
		.IN_PKT_BYTE_CNT_L             (171),
		.IN_PKT_TRANS_COMPRESSED_READ  (165),
		.IN_PKT_TRANS_WRITE            (167),
		.IN_PKT_BURSTWRAP_H            (186),
		.IN_PKT_BURSTWRAP_L            (180),
		.IN_PKT_BURST_SIZE_H           (189),
		.IN_PKT_BURST_SIZE_L           (187),
		.IN_PKT_RESPONSE_STATUS_H      (222),
		.IN_PKT_RESPONSE_STATUS_L      (221),
		.IN_PKT_TRANS_EXCLUSIVE        (170),
		.IN_PKT_BURST_TYPE_H           (191),
		.IN_PKT_BURST_TYPE_L           (190),
		.IN_PKT_ORI_BURST_SIZE_L       (223),
		.IN_PKT_ORI_BURST_SIZE_H       (225),
		.IN_ST_DATA_W                  (226),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (114),
		.OUT_PKT_RESPONSE_STATUS_L     (113),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (115),
		.OUT_PKT_ORI_BURST_SIZE_H      (117),
		.OUT_ST_DATA_W                 (118),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) streamb_dma_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_006_src_valid),                                             //      sink.valid
		.in_channel           (router_006_src_channel),                                           //          .channel
		.in_startofpacket     (router_006_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                                       //          .endofpacket
		.in_ready             (router_006_src_ready),                                             //          .ready
		.in_data              (router_006_src_data),                                              //          .data
		.out_endofpacket      (streamb_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (streamb_dma_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (streamb_dma_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (streamb_dma_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (streamb_dma_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (streamb_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (164),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (179),
		.IN_PKT_BYTE_CNT_L             (171),
		.IN_PKT_TRANS_COMPRESSED_READ  (165),
		.IN_PKT_TRANS_WRITE            (167),
		.IN_PKT_BURSTWRAP_H            (186),
		.IN_PKT_BURSTWRAP_L            (180),
		.IN_PKT_BURST_SIZE_H           (189),
		.IN_PKT_BURST_SIZE_L           (187),
		.IN_PKT_RESPONSE_STATUS_H      (222),
		.IN_PKT_RESPONSE_STATUS_L      (221),
		.IN_PKT_TRANS_EXCLUSIVE        (170),
		.IN_PKT_BURST_TYPE_H           (191),
		.IN_PKT_BURST_TYPE_L           (190),
		.IN_PKT_ORI_BURST_SIZE_L       (223),
		.IN_PKT_ORI_BURST_SIZE_H       (225),
		.IN_ST_DATA_W                  (226),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (114),
		.OUT_PKT_RESPONSE_STATUS_L     (113),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (115),
		.OUT_PKT_ORI_BURST_SIZE_H      (117),
		.OUT_ST_DATA_W                 (118),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) streamr_dma_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_007_src_valid),                                             //      sink.valid
		.in_channel           (router_007_src_channel),                                           //          .channel
		.in_startofpacket     (router_007_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (router_007_src_endofpacket),                                       //          .endofpacket
		.in_ready             (router_007_src_ready),                                             //          .ready
		.in_data              (router_007_src_data),                                              //          .data
		.out_endofpacket      (streamr_dma_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (streamr_dma_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (streamr_dma_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (streamr_dma_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (streamr_dma_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (streamr_dma_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_TRANS_WRITE            (59),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (114),
		.IN_PKT_RESPONSE_STATUS_L      (113),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (115),
		.IN_PKT_ORI_BURST_SIZE_H       (117),
		.IN_ST_DATA_W                  (118),
		.OUT_PKT_ADDR_H                (164),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (179),
		.OUT_PKT_BYTE_CNT_L            (171),
		.OUT_PKT_TRANS_COMPRESSED_READ (165),
		.OUT_PKT_BURST_SIZE_H          (189),
		.OUT_PKT_BURST_SIZE_L          (187),
		.OUT_PKT_RESPONSE_STATUS_H     (222),
		.OUT_PKT_RESPONSE_STATUS_L     (221),
		.OUT_PKT_TRANS_EXCLUSIVE       (170),
		.OUT_PKT_BURST_TYPE_H          (191),
		.OUT_PKT_BURST_TYPE_L          (190),
		.OUT_PKT_ORI_BURST_SIZE_L      (223),
		.OUT_PKT_ORI_BURST_SIZE_H      (225),
		.OUT_ST_DATA_W                 (226),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) streama_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                            //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                          //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                            //          .ready
		.in_data              (cmd_mux_003_src_data),                                             //          .data
		.out_endofpacket      (streama_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (streama_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (streama_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (streama_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (streama_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (streama_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_TRANS_WRITE            (59),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (114),
		.IN_PKT_RESPONSE_STATUS_L      (113),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (115),
		.IN_PKT_ORI_BURST_SIZE_H       (117),
		.IN_ST_DATA_W                  (118),
		.OUT_PKT_ADDR_H                (164),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (179),
		.OUT_PKT_BYTE_CNT_L            (171),
		.OUT_PKT_TRANS_COMPRESSED_READ (165),
		.OUT_PKT_BURST_SIZE_H          (189),
		.OUT_PKT_BURST_SIZE_L          (187),
		.OUT_PKT_RESPONSE_STATUS_H     (222),
		.OUT_PKT_RESPONSE_STATUS_L     (221),
		.OUT_PKT_TRANS_EXCLUSIVE       (170),
		.OUT_PKT_BURST_TYPE_H          (191),
		.OUT_PKT_BURST_TYPE_L          (190),
		.OUT_PKT_ORI_BURST_SIZE_L      (223),
		.OUT_PKT_ORI_BURST_SIZE_H      (225),
		.OUT_ST_DATA_W                 (226),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) streamb_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                                            //      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                                          //          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                                            //          .ready
		.in_data              (cmd_mux_004_src_data),                                             //          .data
		.out_endofpacket      (streamb_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (streamb_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (streamb_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (streamb_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (streamb_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (streamb_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_TRANS_WRITE            (59),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (114),
		.IN_PKT_RESPONSE_STATUS_L      (113),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (115),
		.IN_PKT_ORI_BURST_SIZE_H       (117),
		.IN_ST_DATA_W                  (118),
		.OUT_PKT_ADDR_H                (164),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (179),
		.OUT_PKT_BYTE_CNT_L            (171),
		.OUT_PKT_TRANS_COMPRESSED_READ (165),
		.OUT_PKT_BURST_SIZE_H          (189),
		.OUT_PKT_BURST_SIZE_L          (187),
		.OUT_PKT_RESPONSE_STATUS_H     (222),
		.OUT_PKT_RESPONSE_STATUS_L     (221),
		.OUT_PKT_TRANS_EXCLUSIVE       (170),
		.OUT_PKT_BURST_TYPE_H          (191),
		.OUT_PKT_BURST_TYPE_L          (190),
		.OUT_PKT_ORI_BURST_SIZE_L      (223),
		.OUT_PKT_ORI_BURST_SIZE_H      (225),
		.OUT_ST_DATA_W                 (226),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) streamr_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_005_src_valid),                                            //      sink.valid
		.in_channel           (cmd_mux_005_src_channel),                                          //          .channel
		.in_startofpacket     (cmd_mux_005_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_mux_005_src_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_mux_005_src_ready),                                            //          .ready
		.in_data              (cmd_mux_005_src_data),                                             //          .data
		.out_endofpacket      (streamr_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (streamr_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (streamr_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (streamr_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (streamr_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (streamr_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (streama_dma_csr_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (streama_dma_csr_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (streama_dma_csr_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (streamb_dma_csr_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (streamb_dma_csr_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (streamb_dma_csr_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (streamr_dma_csr_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (streamr_dma_csr_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (streamr_dma_csr_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (streamA_DMA_reset_n_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (streama_dma_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (streama_dma_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (streama_dma_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                        //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (streamA_DMA_reset_n_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (streamb_dma_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (streamb_dma_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (streamb_dma_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                        //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (streamA_DMA_reset_n_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (streamr_dma_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (streamr_dma_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (streamr_dma_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                        //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mm_bridge_0_s0_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (mm_bridge_0_s0_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (mm_bridge_0_s0_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                //         .error
	);

endmodule
