// soc_system_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.1 670

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_2 (
		input  wire        clk_0_clk_clk,                                                      //                                                    clk_0_clk.clk
		input  wire        hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset, // hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset.reset
		input  wire        streamA_DMA_reset_n_reset_bridge_in_reset_reset,                    //                    streamA_DMA_reset_n_reset_bridge_in_reset.reset
		input  wire [31:0] streamA_DMA_mm_read_address,                                        //                                          streamA_DMA_mm_read.address
		output wire        streamA_DMA_mm_read_waitrequest,                                    //                                                             .waitrequest
		input  wire [3:0]  streamA_DMA_mm_read_burstcount,                                     //                                                             .burstcount
		input  wire [1:0]  streamA_DMA_mm_read_byteenable,                                     //                                                             .byteenable
		input  wire        streamA_DMA_mm_read_read,                                           //                                                             .read
		output wire [15:0] streamA_DMA_mm_read_readdata,                                       //                                                             .readdata
		output wire        streamA_DMA_mm_read_readdatavalid,                                  //                                                             .readdatavalid
		output wire [28:0] hps_0_f2h_sdram0_data_address,                                      //                                        hps_0_f2h_sdram0_data.address
		output wire        hps_0_f2h_sdram0_data_read,                                         //                                                             .read
		input  wire [63:0] hps_0_f2h_sdram0_data_readdata,                                     //                                                             .readdata
		output wire [7:0]  hps_0_f2h_sdram0_data_burstcount,                                   //                                                             .burstcount
		input  wire        hps_0_f2h_sdram0_data_readdatavalid,                                //                                                             .readdatavalid
		input  wire        hps_0_f2h_sdram0_data_waitrequest                                   //                                                             .waitrequest
	);

	wire          streama_dma_mm_read_translator_avalon_universal_master_0_waitrequest;   // streamA_DMA_mm_read_agent:av_waitrequest -> streamA_DMA_mm_read_translator:uav_waitrequest
	wire   [15:0] streama_dma_mm_read_translator_avalon_universal_master_0_readdata;      // streamA_DMA_mm_read_agent:av_readdata -> streamA_DMA_mm_read_translator:uav_readdata
	wire          streama_dma_mm_read_translator_avalon_universal_master_0_debugaccess;   // streamA_DMA_mm_read_translator:uav_debugaccess -> streamA_DMA_mm_read_agent:av_debugaccess
	wire   [31:0] streama_dma_mm_read_translator_avalon_universal_master_0_address;       // streamA_DMA_mm_read_translator:uav_address -> streamA_DMA_mm_read_agent:av_address
	wire          streama_dma_mm_read_translator_avalon_universal_master_0_read;          // streamA_DMA_mm_read_translator:uav_read -> streamA_DMA_mm_read_agent:av_read
	wire    [1:0] streama_dma_mm_read_translator_avalon_universal_master_0_byteenable;    // streamA_DMA_mm_read_translator:uav_byteenable -> streamA_DMA_mm_read_agent:av_byteenable
	wire          streama_dma_mm_read_translator_avalon_universal_master_0_readdatavalid; // streamA_DMA_mm_read_agent:av_readdatavalid -> streamA_DMA_mm_read_translator:uav_readdatavalid
	wire          streama_dma_mm_read_translator_avalon_universal_master_0_lock;          // streamA_DMA_mm_read_translator:uav_lock -> streamA_DMA_mm_read_agent:av_lock
	wire          streama_dma_mm_read_translator_avalon_universal_master_0_write;         // streamA_DMA_mm_read_translator:uav_write -> streamA_DMA_mm_read_agent:av_write
	wire   [15:0] streama_dma_mm_read_translator_avalon_universal_master_0_writedata;     // streamA_DMA_mm_read_translator:uav_writedata -> streamA_DMA_mm_read_agent:av_writedata
	wire    [4:0] streama_dma_mm_read_translator_avalon_universal_master_0_burstcount;    // streamA_DMA_mm_read_translator:uav_burstcount -> streamA_DMA_mm_read_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                      // rsp_mux:src_valid -> streamA_DMA_mm_read_agent:rp_valid
	wire   [91:0] rsp_mux_src_data;                                                       // rsp_mux:src_data -> streamA_DMA_mm_read_agent:rp_data
	wire          rsp_mux_src_ready;                                                      // streamA_DMA_mm_read_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                    // rsp_mux:src_channel -> streamA_DMA_mm_read_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                              // rsp_mux:src_startofpacket -> streamA_DMA_mm_read_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                // rsp_mux:src_endofpacket -> streamA_DMA_mm_read_agent:rp_endofpacket
	wire   [63:0] hps_0_f2h_sdram0_data_agent_m0_readdata;                                // hps_0_f2h_sdram0_data_translator:uav_readdata -> hps_0_f2h_sdram0_data_agent:m0_readdata
	wire          hps_0_f2h_sdram0_data_agent_m0_waitrequest;                             // hps_0_f2h_sdram0_data_translator:uav_waitrequest -> hps_0_f2h_sdram0_data_agent:m0_waitrequest
	wire          hps_0_f2h_sdram0_data_agent_m0_debugaccess;                             // hps_0_f2h_sdram0_data_agent:m0_debugaccess -> hps_0_f2h_sdram0_data_translator:uav_debugaccess
	wire   [31:0] hps_0_f2h_sdram0_data_agent_m0_address;                                 // hps_0_f2h_sdram0_data_agent:m0_address -> hps_0_f2h_sdram0_data_translator:uav_address
	wire    [7:0] hps_0_f2h_sdram0_data_agent_m0_byteenable;                              // hps_0_f2h_sdram0_data_agent:m0_byteenable -> hps_0_f2h_sdram0_data_translator:uav_byteenable
	wire          hps_0_f2h_sdram0_data_agent_m0_read;                                    // hps_0_f2h_sdram0_data_agent:m0_read -> hps_0_f2h_sdram0_data_translator:uav_read
	wire          hps_0_f2h_sdram0_data_agent_m0_readdatavalid;                           // hps_0_f2h_sdram0_data_translator:uav_readdatavalid -> hps_0_f2h_sdram0_data_agent:m0_readdatavalid
	wire          hps_0_f2h_sdram0_data_agent_m0_lock;                                    // hps_0_f2h_sdram0_data_agent:m0_lock -> hps_0_f2h_sdram0_data_translator:uav_lock
	wire   [63:0] hps_0_f2h_sdram0_data_agent_m0_writedata;                               // hps_0_f2h_sdram0_data_agent:m0_writedata -> hps_0_f2h_sdram0_data_translator:uav_writedata
	wire          hps_0_f2h_sdram0_data_agent_m0_write;                                   // hps_0_f2h_sdram0_data_agent:m0_write -> hps_0_f2h_sdram0_data_translator:uav_write
	wire   [10:0] hps_0_f2h_sdram0_data_agent_m0_burstcount;                              // hps_0_f2h_sdram0_data_agent:m0_burstcount -> hps_0_f2h_sdram0_data_translator:uav_burstcount
	wire          hps_0_f2h_sdram0_data_agent_rf_source_valid;                            // hps_0_f2h_sdram0_data_agent:rf_source_valid -> hps_0_f2h_sdram0_data_agent_rsp_fifo:in_valid
	wire  [146:0] hps_0_f2h_sdram0_data_agent_rf_source_data;                             // hps_0_f2h_sdram0_data_agent:rf_source_data -> hps_0_f2h_sdram0_data_agent_rsp_fifo:in_data
	wire          hps_0_f2h_sdram0_data_agent_rf_source_ready;                            // hps_0_f2h_sdram0_data_agent_rsp_fifo:in_ready -> hps_0_f2h_sdram0_data_agent:rf_source_ready
	wire          hps_0_f2h_sdram0_data_agent_rf_source_startofpacket;                    // hps_0_f2h_sdram0_data_agent:rf_source_startofpacket -> hps_0_f2h_sdram0_data_agent_rsp_fifo:in_startofpacket
	wire          hps_0_f2h_sdram0_data_agent_rf_source_endofpacket;                      // hps_0_f2h_sdram0_data_agent:rf_source_endofpacket -> hps_0_f2h_sdram0_data_agent_rsp_fifo:in_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_rsp_fifo_out_valid;                         // hps_0_f2h_sdram0_data_agent_rsp_fifo:out_valid -> hps_0_f2h_sdram0_data_agent:rf_sink_valid
	wire  [146:0] hps_0_f2h_sdram0_data_agent_rsp_fifo_out_data;                          // hps_0_f2h_sdram0_data_agent_rsp_fifo:out_data -> hps_0_f2h_sdram0_data_agent:rf_sink_data
	wire          hps_0_f2h_sdram0_data_agent_rsp_fifo_out_ready;                         // hps_0_f2h_sdram0_data_agent:rf_sink_ready -> hps_0_f2h_sdram0_data_agent_rsp_fifo:out_ready
	wire          hps_0_f2h_sdram0_data_agent_rsp_fifo_out_startofpacket;                 // hps_0_f2h_sdram0_data_agent_rsp_fifo:out_startofpacket -> hps_0_f2h_sdram0_data_agent:rf_sink_startofpacket
	wire          hps_0_f2h_sdram0_data_agent_rsp_fifo_out_endofpacket;                   // hps_0_f2h_sdram0_data_agent_rsp_fifo:out_endofpacket -> hps_0_f2h_sdram0_data_agent:rf_sink_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_rdata_fifo_src_valid;                       // hps_0_f2h_sdram0_data_agent:rdata_fifo_src_valid -> hps_0_f2h_sdram0_data_agent_rdata_fifo:in_valid
	wire   [65:0] hps_0_f2h_sdram0_data_agent_rdata_fifo_src_data;                        // hps_0_f2h_sdram0_data_agent:rdata_fifo_src_data -> hps_0_f2h_sdram0_data_agent_rdata_fifo:in_data
	wire          hps_0_f2h_sdram0_data_agent_rdata_fifo_src_ready;                       // hps_0_f2h_sdram0_data_agent_rdata_fifo:in_ready -> hps_0_f2h_sdram0_data_agent:rdata_fifo_src_ready
	wire          streama_dma_mm_read_agent_cp_valid;                                     // streamA_DMA_mm_read_agent:cp_valid -> router:sink_valid
	wire   [91:0] streama_dma_mm_read_agent_cp_data;                                      // streamA_DMA_mm_read_agent:cp_data -> router:sink_data
	wire          streama_dma_mm_read_agent_cp_ready;                                     // router:sink_ready -> streamA_DMA_mm_read_agent:cp_ready
	wire          streama_dma_mm_read_agent_cp_startofpacket;                             // streamA_DMA_mm_read_agent:cp_startofpacket -> router:sink_startofpacket
	wire          streama_dma_mm_read_agent_cp_endofpacket;                               // streamA_DMA_mm_read_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                       // router:src_valid -> cmd_demux:sink_valid
	wire   [91:0] router_src_data;                                                        // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                       // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                     // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                               // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                 // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_rp_valid;                                   // hps_0_f2h_sdram0_data_agent:rp_valid -> router_001:sink_valid
	wire  [145:0] hps_0_f2h_sdram0_data_agent_rp_data;                                    // hps_0_f2h_sdram0_data_agent:rp_data -> router_001:sink_data
	wire          hps_0_f2h_sdram0_data_agent_rp_ready;                                   // router_001:sink_ready -> hps_0_f2h_sdram0_data_agent:rp_ready
	wire          hps_0_f2h_sdram0_data_agent_rp_startofpacket;                           // hps_0_f2h_sdram0_data_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_f2h_sdram0_data_agent_rp_endofpacket;                             // hps_0_f2h_sdram0_data_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                   // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire   [91:0] cmd_demux_src0_data;                                                    // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                   // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                                 // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                           // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                             // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                   // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire   [91:0] rsp_demux_src0_data;                                                    // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                   // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                                 // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                           // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                             // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          cmd_mux_src_valid;                                                      // cmd_mux:src_valid -> hps_0_f2h_sdram0_data_cmd_width_adapter:in_valid
	wire   [91:0] cmd_mux_src_data;                                                       // cmd_mux:src_data -> hps_0_f2h_sdram0_data_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                      // hps_0_f2h_sdram0_data_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                    // cmd_mux:src_channel -> hps_0_f2h_sdram0_data_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                              // cmd_mux:src_startofpacket -> hps_0_f2h_sdram0_data_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                // cmd_mux:src_endofpacket -> hps_0_f2h_sdram0_data_cmd_width_adapter:in_endofpacket
	wire          hps_0_f2h_sdram0_data_cmd_width_adapter_src_valid;                      // hps_0_f2h_sdram0_data_cmd_width_adapter:out_valid -> hps_0_f2h_sdram0_data_agent:cp_valid
	wire  [145:0] hps_0_f2h_sdram0_data_cmd_width_adapter_src_data;                       // hps_0_f2h_sdram0_data_cmd_width_adapter:out_data -> hps_0_f2h_sdram0_data_agent:cp_data
	wire          hps_0_f2h_sdram0_data_cmd_width_adapter_src_ready;                      // hps_0_f2h_sdram0_data_agent:cp_ready -> hps_0_f2h_sdram0_data_cmd_width_adapter:out_ready
	wire    [0:0] hps_0_f2h_sdram0_data_cmd_width_adapter_src_channel;                    // hps_0_f2h_sdram0_data_cmd_width_adapter:out_channel -> hps_0_f2h_sdram0_data_agent:cp_channel
	wire          hps_0_f2h_sdram0_data_cmd_width_adapter_src_startofpacket;              // hps_0_f2h_sdram0_data_cmd_width_adapter:out_startofpacket -> hps_0_f2h_sdram0_data_agent:cp_startofpacket
	wire          hps_0_f2h_sdram0_data_cmd_width_adapter_src_endofpacket;                // hps_0_f2h_sdram0_data_cmd_width_adapter:out_endofpacket -> hps_0_f2h_sdram0_data_agent:cp_endofpacket
	wire          router_001_src_valid;                                                   // router_001:src_valid -> hps_0_f2h_sdram0_data_rsp_width_adapter:in_valid
	wire  [145:0] router_001_src_data;                                                    // router_001:src_data -> hps_0_f2h_sdram0_data_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                   // hps_0_f2h_sdram0_data_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                                 // router_001:src_channel -> hps_0_f2h_sdram0_data_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                           // router_001:src_startofpacket -> hps_0_f2h_sdram0_data_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                             // router_001:src_endofpacket -> hps_0_f2h_sdram0_data_rsp_width_adapter:in_endofpacket
	wire          hps_0_f2h_sdram0_data_rsp_width_adapter_src_valid;                      // hps_0_f2h_sdram0_data_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire   [91:0] hps_0_f2h_sdram0_data_rsp_width_adapter_src_data;                       // hps_0_f2h_sdram0_data_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          hps_0_f2h_sdram0_data_rsp_width_adapter_src_ready;                      // rsp_demux:sink_ready -> hps_0_f2h_sdram0_data_rsp_width_adapter:out_ready
	wire    [0:0] hps_0_f2h_sdram0_data_rsp_width_adapter_src_channel;                    // hps_0_f2h_sdram0_data_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          hps_0_f2h_sdram0_data_rsp_width_adapter_src_startofpacket;              // hps_0_f2h_sdram0_data_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          hps_0_f2h_sdram0_data_rsp_width_adapter_src_endofpacket;                // hps_0_f2h_sdram0_data_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_rdata_fifo_out_valid;                       // hps_0_f2h_sdram0_data_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [65:0] hps_0_f2h_sdram0_data_agent_rdata_fifo_out_data;                        // hps_0_f2h_sdram0_data_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          hps_0_f2h_sdram0_data_agent_rdata_fifo_out_ready;                       // avalon_st_adapter:in_0_ready -> hps_0_f2h_sdram0_data_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                          // avalon_st_adapter:out_0_valid -> hps_0_f2h_sdram0_data_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_out_0_data;                                           // avalon_st_adapter:out_0_data -> hps_0_f2h_sdram0_data_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                          // hps_0_f2h_sdram0_data_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                          // avalon_st_adapter:out_0_error -> hps_0_f2h_sdram0_data_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) streama_dma_mm_read_translator (
		.clk                    (clk_0_clk_clk),                                                          //                       clk.clk
		.reset                  (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (streama_dma_mm_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (streama_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (streama_dma_mm_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (streama_dma_mm_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (streama_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (streama_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (streama_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (streama_dma_mm_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (streama_dma_mm_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (streama_dma_mm_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (streama_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (streamA_DMA_mm_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (streamA_DMA_mm_read_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (streamA_DMA_mm_read_burstcount),                                         //                          .burstcount
		.av_byteenable          (streamA_DMA_mm_read_byteenable),                                         //                          .byteenable
		.av_read                (streamA_DMA_mm_read_read),                                               //                          .read
		.av_readdata            (streamA_DMA_mm_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (streamA_DMA_mm_read_readdatavalid),                                      //                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                   //               (terminated)
		.av_begintransfer       (1'b0),                                                                   //               (terminated)
		.av_chipselect          (1'b0),                                                                   //               (terminated)
		.av_write               (1'b0),                                                                   //               (terminated)
		.av_writedata           (16'b0000000000000000),                                                   //               (terminated)
		.av_lock                (1'b0),                                                                   //               (terminated)
		.av_debugaccess         (1'b0),                                                                   //               (terminated)
		.uav_clken              (),                                                                       //               (terminated)
		.av_clken               (1'b1),                                                                   //               (terminated)
		.uav_response           (2'b00),                                                                  //               (terminated)
		.av_response            (),                                                                       //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid  ()                                                                        //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (29),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (11),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hps_0_f2h_sdram0_data_translator (
		.clk                    (clk_0_clk_clk),                                                      //                      clk.clk
		.reset                  (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hps_0_f2h_sdram0_data_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (hps_0_f2h_sdram0_data_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (hps_0_f2h_sdram0_data_agent_m0_read),                                //                         .read
		.uav_write              (hps_0_f2h_sdram0_data_agent_m0_write),                               //                         .write
		.uav_waitrequest        (hps_0_f2h_sdram0_data_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (hps_0_f2h_sdram0_data_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (hps_0_f2h_sdram0_data_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (hps_0_f2h_sdram0_data_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (hps_0_f2h_sdram0_data_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (hps_0_f2h_sdram0_data_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (hps_0_f2h_sdram0_data_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (hps_0_f2h_sdram0_data_address),                                      //      avalon_anti_slave_0.address
		.av_read                (hps_0_f2h_sdram0_data_read),                                         //                         .read
		.av_readdata            (hps_0_f2h_sdram0_data_readdata),                                     //                         .readdata
		.av_burstcount          (hps_0_f2h_sdram0_data_burstcount),                                   //                         .burstcount
		.av_readdatavalid       (hps_0_f2h_sdram0_data_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (hps_0_f2h_sdram0_data_waitrequest),                                  //                         .waitrequest
		.av_write               (),                                                                   //              (terminated)
		.av_writedata           (),                                                                   //              (terminated)
		.av_begintransfer       (),                                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                                   //              (terminated)
		.av_byteenable          (),                                                                   //              (terminated)
		.av_writebyteenable     (),                                                                   //              (terminated)
		.av_lock                (),                                                                   //              (terminated)
		.av_chipselect          (),                                                                   //              (terminated)
		.av_clken               (),                                                                   //              (terminated)
		.uav_clken              (1'b0),                                                               //              (terminated)
		.av_debugaccess         (),                                                                   //              (terminated)
		.av_outputenable        (),                                                                   //              (terminated)
		.uav_response           (),                                                                   //              (terminated)
		.av_response            (2'b00),                                                              //              (terminated)
		.uav_writeresponsevalid (),                                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (67),
		.PKT_BYTE_CNT_H            (66),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (78),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) streama_dma_mm_read_agent (
		.clk                   (clk_0_clk_clk),                                                          //       clk.clk
		.reset                 (streamA_DMA_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (streama_dma_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (streama_dma_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (streama_dma_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (streama_dma_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (streama_dma_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (streama_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (streama_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (streama_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (streama_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (streama_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (streama_dma_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (streama_dma_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (streama_dma_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (streama_dma_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (streama_dma_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (streama_dma_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                      //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                       //          .data
		.rp_channel            (rsp_mux_src_channel),                                                    //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                      //          .ready
		.av_response           (),                                                                       // (terminated)
		.av_writeresponsevalid ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (145),
		.PKT_ORI_BURST_SIZE_L      (143),
		.PKT_RESPONSE_STATUS_H     (142),
		.PKT_RESPONSE_STATUS_L     (141),
		.PKT_BURST_SIZE_H          (124),
		.PKT_BURST_SIZE_L          (122),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (129),
		.PKT_PROTECTION_H          (136),
		.PKT_PROTECTION_L          (134),
		.PKT_BURSTWRAP_H           (121),
		.PKT_BURSTWRAP_L           (121),
		.PKT_BYTE_CNT_H            (120),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (131),
		.PKT_SRC_ID_L              (131),
		.PKT_DEST_ID_H             (132),
		.PKT_DEST_ID_L             (132),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (146),
		.AVS_BURSTCOUNT_W          (11),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hps_0_f2h_sdram0_data_agent (
		.clk                     (clk_0_clk_clk),                                                      //             clk.clk
		.reset                   (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hps_0_f2h_sdram0_data_agent_m0_address),                             //              m0.address
		.m0_burstcount           (hps_0_f2h_sdram0_data_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (hps_0_f2h_sdram0_data_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (hps_0_f2h_sdram0_data_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (hps_0_f2h_sdram0_data_agent_m0_lock),                                //                .lock
		.m0_readdata             (hps_0_f2h_sdram0_data_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (hps_0_f2h_sdram0_data_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (hps_0_f2h_sdram0_data_agent_m0_read),                                //                .read
		.m0_waitrequest          (hps_0_f2h_sdram0_data_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (hps_0_f2h_sdram0_data_agent_m0_writedata),                           //                .writedata
		.m0_write                (hps_0_f2h_sdram0_data_agent_m0_write),                               //                .write
		.rp_endofpacket          (hps_0_f2h_sdram0_data_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (hps_0_f2h_sdram0_data_agent_rp_ready),                               //                .ready
		.rp_valid                (hps_0_f2h_sdram0_data_agent_rp_valid),                               //                .valid
		.rp_data                 (hps_0_f2h_sdram0_data_agent_rp_data),                                //                .data
		.rp_startofpacket        (hps_0_f2h_sdram0_data_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (hps_0_f2h_sdram0_data_cmd_width_adapter_src_ready),                  //              cp.ready
		.cp_valid                (hps_0_f2h_sdram0_data_cmd_width_adapter_src_valid),                  //                .valid
		.cp_data                 (hps_0_f2h_sdram0_data_cmd_width_adapter_src_data),                   //                .data
		.cp_startofpacket        (hps_0_f2h_sdram0_data_cmd_width_adapter_src_startofpacket),          //                .startofpacket
		.cp_endofpacket          (hps_0_f2h_sdram0_data_cmd_width_adapter_src_endofpacket),            //                .endofpacket
		.cp_channel              (hps_0_f2h_sdram0_data_cmd_width_adapter_src_channel),                //                .channel
		.rf_sink_ready           (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (hps_0_f2h_sdram0_data_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (hps_0_f2h_sdram0_data_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (hps_0_f2h_sdram0_data_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (hps_0_f2h_sdram0_data_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (hps_0_f2h_sdram0_data_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (147),
		.FIFO_DEPTH          (15),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_0_f2h_sdram0_data_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hps_0_f2h_sdram0_data_agent_rf_source_data),                         //        in.data
		.in_valid          (hps_0_f2h_sdram0_data_agent_rf_source_valid),                        //          .valid
		.in_ready          (hps_0_f2h_sdram0_data_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (hps_0_f2h_sdram0_data_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (hps_0_f2h_sdram0_data_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (64),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_0_f2h_sdram0_data_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_startofpacket  (1'b0),                                                               // (terminated)
		.in_endofpacket    (1'b0),                                                               // (terminated)
		.out_startofpacket (),                                                                   // (terminated)
		.out_endofpacket   (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	soc_system_mm_interconnect_2_router router (
		.sink_ready         (streama_dma_mm_read_agent_cp_ready),              //      sink.ready
		.sink_valid         (streama_dma_mm_read_agent_cp_valid),              //          .valid
		.sink_data          (streama_dma_mm_read_agent_cp_data),               //          .data
		.sink_startofpacket (streama_dma_mm_read_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (streama_dma_mm_read_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_001 router_001 (
		.sink_ready         (hps_0_f2h_sdram0_data_agent_rp_ready),                               //      sink.ready
		.sink_valid         (hps_0_f2h_sdram0_data_agent_rp_valid),                               //          .valid
		.sink_data          (hps_0_f2h_sdram0_data_agent_rp_data),                                //          .data
		.sink_startofpacket (hps_0_f2h_sdram0_data_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (hps_0_f2h_sdram0_data_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                               //       src.ready
		.src_valid          (router_001_src_valid),                                               //          .valid
		.src_data           (router_001_src_data),                                                //          .data
		.src_channel        (router_001_src_channel),                                             //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                //      sink.ready
		.sink_channel       (router_src_channel),                              //          .channel
		.sink_data          (router_src_data),                                 //          .data
		.sink_startofpacket (router_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_src_valid),                                //          .valid
		.src0_ready         (cmd_demux_src0_ready),                            //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                            //          .valid
		.src0_data          (cmd_demux_src0_data),                             //          .data
		.src0_channel       (cmd_demux_src0_channel),                          //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                      //       clk.clk
		.reset               (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                  //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                  //          .valid
		.src_data            (cmd_mux_src_data),                                                   //          .data
		.src_channel         (cmd_mux_src_channel),                                                //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                            //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                               //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                               //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                             //          .channel
		.sink0_data          (cmd_demux_src0_data),                                                //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (hps_0_f2h_sdram0_data_rsp_width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (hps_0_f2h_sdram0_data_rsp_width_adapter_src_channel),                //          .channel
		.sink_data          (hps_0_f2h_sdram0_data_rsp_width_adapter_src_data),                   //          .data
		.sink_startofpacket (hps_0_f2h_sdram0_data_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (hps_0_f2h_sdram0_data_rsp_width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (hps_0_f2h_sdram0_data_rsp_width_adapter_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                               //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                               //          .valid
		.src0_data          (rsp_demux_src0_data),                                                //          .data
		.src0_channel       (rsp_demux_src0_channel),                                             //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                   //       clk.clk
		.reset               (streamA_DMA_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                               //       src.ready
		.src_valid           (rsp_mux_src_valid),                               //          .valid
		.src_data            (rsp_mux_src_data),                                //          .data
		.src_channel         (rsp_mux_src_channel),                             //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                            //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                            //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                          //          .channel
		.sink0_data          (rsp_demux_src0_data),                             //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (66),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (67),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (88),
		.IN_PKT_RESPONSE_STATUS_L      (87),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (89),
		.IN_PKT_ORI_BURST_SIZE_H       (91),
		.IN_ST_DATA_W                  (92),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (142),
		.OUT_PKT_RESPONSE_STATUS_L     (141),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (143),
		.OUT_PKT_ORI_BURST_SIZE_H      (145),
		.OUT_ST_DATA_W                 (146),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) hps_0_f2h_sdram0_data_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                  //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                            //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                  //          .ready
		.in_data              (cmd_mux_src_data),                                                   //          .data
		.out_endofpacket      (hps_0_f2h_sdram0_data_cmd_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (hps_0_f2h_sdram0_data_cmd_width_adapter_src_data),                   //          .data
		.out_channel          (hps_0_f2h_sdram0_data_cmd_width_adapter_src_channel),                //          .channel
		.out_valid            (hps_0_f2h_sdram0_data_cmd_width_adapter_src_valid),                  //          .valid
		.out_ready            (hps_0_f2h_sdram0_data_cmd_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (hps_0_f2h_sdram0_data_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (142),
		.IN_PKT_RESPONSE_STATUS_L      (141),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (143),
		.IN_PKT_ORI_BURST_SIZE_H       (145),
		.IN_ST_DATA_W                  (146),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (66),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (88),
		.OUT_PKT_RESPONSE_STATUS_L     (87),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (89),
		.OUT_PKT_ORI_BURST_SIZE_H      (91),
		.OUT_ST_DATA_W                 (92),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) hps_0_f2h_sdram0_data_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_001_src_valid),                                               //      sink.valid
		.in_channel           (router_001_src_channel),                                             //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                         //          .endofpacket
		.in_ready             (router_001_src_ready),                                               //          .ready
		.in_data              (router_001_src_data),                                                //          .data
		.out_endofpacket      (hps_0_f2h_sdram0_data_rsp_width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (hps_0_f2h_sdram0_data_rsp_width_adapter_src_data),                   //          .data
		.out_channel          (hps_0_f2h_sdram0_data_rsp_width_adapter_src_channel),                //          .channel
		.out_valid            (hps_0_f2h_sdram0_data_rsp_width_adapter_src_valid),                  //          .valid
		.out_ready            (hps_0_f2h_sdram0_data_rsp_width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (hps_0_f2h_sdram0_data_rsp_width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	soc_system_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                                      // in_clk_0.clk
		.in_rst_0_reset (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                      //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                      //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                       //         .error
	);

endmodule
